searchState.loadedDescShard("swc_core", 3, "The archived counterpart of <code>TsAsExpr::span</code>\nThe archived counterpart of <code>TsTypeAssertion::span</code>\nThe archived counterpart of <code>TsNonNullExpr::span</code>\nThe archived counterpart of <code>TsSatisfiesExpr::span</code>\nThe archived counterpart of <code>TsConstAssertion::span</code>\nThe archived counterpart of <code>TsInstantiation::span</code>\nThe archived counterpart of <code>Invalid::span</code>\nThe archived counterpart of <code>ImportDecl::specifiers</code>\nThe archived counterpart of <code>NamedExport::specifiers</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Spread</code>, and <code>None</code> …\nThe archived counterpart of <code>ExprOrSpread::spread</code>\nReturns the truncated principal square root of <code>self</code> – …\nThe archived counterpart of <code>ImportDecl::src</code>\nThe archived counterpart of <code>ExportAll::src</code>\nThe archived counterpart of <code>NamedExport::src</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>StaticBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Stmt</code>, and <code>None</code> …\nThe archived counterpart of <code>BlockStmt::stmts</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Str</code>, and <code>None</code> otherwise.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Super</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::super_class</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>SuperProp</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::super_type_params</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Switch</code>, and <code>None</code> …\nThe archived counterpart of <code>Ident::sym</code>\nThe archived counterpart of <code>IdentName::sym</code>\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe archived counterpart of <code>TaggedTpl::tag</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>TaggedTpl</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::tail</code>\nThe archived counterpart of <code>CondExpr::test</code>\nThe archived counterpart of <code>IfStmt::test</code>\nThe archived counterpart of <code>WhileStmt::test</code>\nThe archived counterpart of <code>DoWhileStmt::test</code>\nThe archived counterpart of <code>ForStmt::test</code>\nThe archived counterpart of <code>SwitchCase::test</code>\nNone for <code>default:</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>This</code>, and <code>None</code> …\nThe archived counterpart of <code>SetterProp::this_param</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Throw</code>, and <code>None</code> …\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nSee <code>Ident::to_id</code> for documentation.\nCreates <code>Id</code> using <code>Atom</code> and <code>SyntaxContext</code> of <code>self</code>.\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the sign and the <code>u64</code> digits representation of the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Tpl</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Tpl</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>TaggedTpl::tpl</code>\nThis is boxed to reduce the type size of Expr.\nReturns the number of least-significant bits that are zero,\nThe archived counterpart of <code>TsConditionalType::true_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Try</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsArrayType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsAs</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsAs</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsCallSignatureDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConditionalType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstructSignatureDecl</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsConstructorType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEntityName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEntityName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsEnum</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsExportAssignment</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsExternalModuleRef</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsFnOrConstructorType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsFnType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsGetterSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsImportEquals</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsImportType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIndexedAccessType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInferType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInstantiation</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInstantiation</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInterface</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsInterfaceDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsIntersectionType</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsKeywordType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsLitType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsMappedType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsMethodSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsModule</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsModuleBlock</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNamespaceDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNamespaceExport</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNonNull</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsNonNull</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsOptionalType</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsParamProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsParenthesizedType</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsPropertySignature</code>, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsQualifiedName</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsRestType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSatisfies</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSatisfies</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsSetterSignature</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsThisType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsThisType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTupleType</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAlias</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeLit</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeOperator</code>, and <code>None</code>…\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypePredicate</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeQuery</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsTypeRef</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant …\nReturns <code>Some</code> if <code>self</code> is of variant <code>TsUnionType</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTupleElement::ty</code>\nThe archived counterpart of <code>ClassProp::type_ann</code>\nThe archived counterpart of <code>PrivateProp::type_ann</code>\nThe archived counterpart of <code>AutoAccessor::type_ann</code>\nThe archived counterpart of <code>BindingIdent::type_ann</code>\nThe archived counterpart of <code>ArrayPat::type_ann</code>\nThe archived counterpart of <code>ObjectPat::type_ann</code>\nThe archived counterpart of <code>RestPat::type_ann</code>\nThe archived counterpart of <code>GetterProp::type_ann</code>\nThe archived counterpart of <code>TsTypeAnn::type_ann</code>\nThe archived counterpart of <code>TsCallSignatureDecl::type_ann</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsPropertySignature::type_ann</code>\nThe archived counterpart of <code>TsGetterSignature::type_ann</code>\nThe archived counterpart of <code>TsMethodSignature::type_ann</code>\nThe archived counterpart of <code>TsIndexSignature::type_ann</code>\nThe archived counterpart of <code>TsFnType::type_ann</code>\nThe archived counterpart of <code>TsConstructorType::type_ann</code>\nThe archived counterpart of <code>TsTypePredicate::type_ann</code>\nThe archived counterpart of <code>TsOptionalType::type_ann</code>\nThe archived counterpart of <code>TsRestType::type_ann</code>\nThe archived counterpart of <code>TsParenthesizedType::type_ann</code>\nThe archived counterpart of <code>TsTypeOperator::type_ann</code>\nThe archived counterpart of <code>TsMappedType::type_ann</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_ann</code>\nThe archived counterpart of <code>TsAsExpr::type_ann</code>\nThe archived counterpart of <code>TsTypeAssertion::type_ann</code>\nThe archived counterpart of <code>TsSatisfiesExpr::type_ann</code>\nThe archived counterpart of <code>CallExpr::type_args</code>\nThe archived counterpart of <code>NewExpr::type_args</code>\nThe archived counterpart of <code>OptCall::type_args</code>\nThe archived counterpart of <code>JSXOpeningElement::type_args</code>\nNote: This field’s name is different from one from babel …\nThe archived counterpart of <code>TsTypeQuery::type_args</code>\nThe archived counterpart of <code>TsImportType::type_args</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::type_args</code>\nThe archived counterpart of <code>TsInstantiation::type_args</code>\nThe archived counterpart of <code>TsTypeRef::type_name</code>\nThe archived counterpart of <code>ImportDecl::type_only</code>\nThe archived counterpart of <code>ExportAll::type_only</code>\nThe archived counterpart of <code>NamedExport::type_only</code>\nThe archived counterpart of <code>TsInferType::type_param</code>\nThe archived counterpart of <code>TsMappedType::type_param</code>\nThe archived counterpart of <code>Class::type_params</code>\nThe archived counterpart of <code>ArrowExpr::type_params</code>\nThe archived counterpart of <code>TaggedTpl::type_params</code>\nThe archived counterpart of <code>Function::type_params</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::type_params</code>\nThe archived counterpart of <code>TsFnType::type_params</code>\nThe archived counterpart of <code>TsConstructorType::type_params</code>\nThe archived counterpart of <code>TsTypeRef::type_params</code>\nThe archived counterpart of <code>TsInterfaceDecl::type_params</code>\nThe archived counterpart of <code>TsTypeAliasDecl::type_params</code>\nThe archived counterpart of <code>TsUnionType::types</code>\nThe archived counterpart of <code>TsIntersectionType::types</code>\nThe archived counterpart of <code>TsTplLitType::types</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Unary</code>, and <code>None</code> …\nCreates <code>void 0</code>.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnwraps an expression with a given function.\nNormalize parenthesized expressions.\nNormalize parenthesized expressions.\nNormalize sequences and parenthesized expressions.\nUnwraps an expression with a given function.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Update</code>, and <code>None</code> …\nThe archived counterpart of <code>ForStmt::update</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Using</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>UsingDecl</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassProp::value</code>\nThe archived counterpart of <code>PrivateProp::value</code>\nThe archived counterpart of <code>AutoAccessor::value</code>\nThe archived counterpart of <code>JSXAttr::value</code>\nBabel uses Expr instead of JSXAttrValue\nThe archived counterpart of <code>JSXText::value</code>\nThe archived counterpart of <code>BigInt::value</code>\nThe archived counterpart of <code>Str::value</code>\nThe archived counterpart of <code>Bool::value</code>\nThe archived counterpart of <code>Number::value</code>\n<strong>Note</strong>: This should not be <code>NaN</code>. Use crate::Ident to …\nThe archived counterpart of <code>KeyValuePatProp::value</code>\nThe archived counterpart of <code>AssignPatProp::value</code>\nThe archived counterpart of <code>KeyValueProp::value</code>\nThe archived counterpart of <code>AssignProp::value</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Var</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>VarDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>VarDecl</code>, and <code>None</code> …\nAlternative for <code>toIdentifier</code> of babel.\nCalls VisitMut<code>::visit_mut_big_int_value</code> with <code>self</code>. (Extra …\nCalls VisitMut<code>::visit_mut_class</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_class_member</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_class_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_private_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_class_method</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_private_method</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_constructor</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_decorator</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_method_kind</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_static_block</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_key</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_auto_accessor</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_fn_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_class_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_var_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_var_decl_kind</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_var_declarator</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_using_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_this_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_array_lit</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_object_lit</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_with</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_with_item</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_prop_or_spread</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_spread_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_unary_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_update_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_bin_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_fn_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_class_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_member_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_member_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_super_prop_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_super_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_cond_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_call_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_new_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_seq_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_arrow_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_yield_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_meta_prop_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_meta_prop_kind</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_await_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_tpl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_tagged_tpl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_tpl_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_paren_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_callee</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_super</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_expr_or_spread</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_block_stmt_or_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_target</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_target_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_simple_assign_target</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_opt_chain_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_opt_chain_base</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_opt_call</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_function</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_param</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_param_or_ts_param_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_binding_ident</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ident</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ident_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_private_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_object</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_member_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_namespaced_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_empty_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_expr_container</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_spread_child</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_element_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_opening_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_attr_or_spread</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_closing_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_attr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_attr_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_attr_value</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_text</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_element_child</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_fragment</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_opening_fragment</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_jsx_closing_fragment</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_lit</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_big_int</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_str</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_bool</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_null</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_regex</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_number</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_program</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_module</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_script</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_module_item</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_module_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_default_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_phase</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_all</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_named_export</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_default_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_default_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_specifier</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_import_default_specifier</code> with …\nCalls VisitMut<code>::visit_mut_import_star_as_specifier</code> with …\nCalls VisitMut<code>::visit_mut_import_named_specifier</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_specifier</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_export_namespace_specifier</code> with …\nCalls VisitMut<code>::visit_mut_export_default_specifier</code> with …\nCalls VisitMut<code>::visit_mut_export_named_specifier</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_module_export_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_binary_op</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_op</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_update_op</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_unary_op</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_array_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_object_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_rest_pat</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_object_pat_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_key_value_pat_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_pat_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_key_value_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_assign_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_getter_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_setter_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_method_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_prop_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_computed_prop_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_block_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_expr_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_empty_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_debugger_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_with_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_return_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_labeled_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_break_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_continue_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_if_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_switch_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_throw_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_try_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_while_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_do_while_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_for_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_for_in_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_for_of_stmt</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_switch_case</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_catch_clause</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_for_head</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_var_decl_or_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_ann</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_param_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_param</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_param_instantiation</code> with …\nCalls VisitMut<code>::visit_mut_ts_param_prop</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_param_prop_param</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_qualified_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_entity_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_call_signature_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_construct_signature_decl</code> with …\nCalls VisitMut<code>::visit_mut_ts_property_signature</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_getter_signature</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_setter_signature</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_method_signature</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_index_signature</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_fn_or_constructor_type</code> with …\nCalls VisitMut<code>::visit_mut_ts_keyword_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_keyword_type_kind</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_this_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_fn_param</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_fn_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_constructor_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_ref</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_predicate</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_this_type_or_ident</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_query</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_query_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_import_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_lit</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_array_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_tuple_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_tuple_element</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_optional_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_rest_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_union_or_intersection_type</code> …\nCalls VisitMut<code>::visit_mut_ts_union_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_intersection_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_conditional_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_infer_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_parenthesized_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_operator</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_operator_op</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_indexed_access_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_true_plus_minus</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_mapped_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_lit_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_lit</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_tpl_lit_type</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_interface_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_interface_body</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_expr_with_type_args</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_alias_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_enum_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_enum_member</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_enum_member_id</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_module_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_namespace_body</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_module_block</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_namespace_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_module_name</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_import_equals_decl</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_module_ref</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_external_module_ref</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_export_assignment</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_namespace_export_decl</code> with …\nCalls VisitMut<code>::visit_mut_ts_as_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_type_assertion</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_non_null_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_satisfies_expr</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_accessibility</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_const_assertion</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_ts_instantiation</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_invalid</code> with <code>self</code>.\nCalls VisitMut<code>::visit_mut_es_version</code> with <code>self</code>.\nCalls Visit<code>::visit_big_int_value</code> with <code>self</code>. (Extra impl)\nCalls Visit<code>::visit_class</code> with <code>self</code>.\nCalls Visit<code>::visit_class_member</code> with <code>self</code>.\nCalls Visit<code>::visit_class_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_private_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_class_method</code> with <code>self</code>.\nCalls Visit<code>::visit_private_method</code> with <code>self</code>.\nCalls Visit<code>::visit_constructor</code> with <code>self</code>.\nCalls Visit<code>::visit_decorator</code> with <code>self</code>.\nCalls Visit<code>::visit_method_kind</code> with <code>self</code>.\nCalls Visit<code>::visit_static_block</code> with <code>self</code>.\nCalls Visit<code>::visit_key</code> with <code>self</code>.\nCalls Visit<code>::visit_auto_accessor</code> with <code>self</code>.\nCalls Visit<code>::visit_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_fn_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_class_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_var_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_var_decl_kind</code> with <code>self</code>.\nCalls Visit<code>::visit_var_declarator</code> with <code>self</code>.\nCalls Visit<code>::visit_using_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_this_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_array_lit</code> with <code>self</code>.\nCalls Visit<code>::visit_object_lit</code> with <code>self</code>.\nCalls Visit<code>::visit_import_with</code> with <code>self</code>.\nCalls Visit<code>::visit_import_with_item</code> with <code>self</code>.\nCalls Visit<code>::visit_prop_or_spread</code> with <code>self</code>.\nCalls Visit<code>::visit_spread_element</code> with <code>self</code>.\nCalls Visit<code>::visit_unary_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_update_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_bin_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_fn_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_class_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_member_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_member_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_super_prop_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_super_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_cond_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_call_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_new_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_seq_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_arrow_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_yield_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_meta_prop_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_meta_prop_kind</code> with <code>self</code>.\nCalls Visit<code>::visit_await_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_tpl</code> with <code>self</code>.\nCalls Visit<code>::visit_tagged_tpl</code> with <code>self</code>.\nCalls Visit<code>::visit_tpl_element</code> with <code>self</code>.\nCalls Visit<code>::visit_paren_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_callee</code> with <code>self</code>.\nCalls Visit<code>::visit_super</code> with <code>self</code>.\nCalls Visit<code>::visit_import</code> with <code>self</code>.\nCalls Visit<code>::visit_expr_or_spread</code> with <code>self</code>.\nCalls Visit<code>::visit_block_stmt_or_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_target</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_target_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_simple_assign_target</code> with <code>self</code>.\nCalls Visit<code>::visit_opt_chain_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_opt_chain_base</code> with <code>self</code>.\nCalls Visit<code>::visit_opt_call</code> with <code>self</code>.\nCalls Visit<code>::visit_function</code> with <code>self</code>.\nCalls Visit<code>::visit_param</code> with <code>self</code>.\nCalls Visit<code>::visit_param_or_ts_param_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_binding_ident</code> with <code>self</code>.\nCalls Visit<code>::visit_ident</code> with <code>self</code>.\nCalls Visit<code>::visit_ident_name</code> with <code>self</code>.\nCalls Visit<code>::visit_private_name</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_object</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_member_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_namespaced_name</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_empty_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_expr_container</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_spread_child</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_element_name</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_opening_element</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_attr_or_spread</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_closing_element</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_attr</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_attr_name</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_attr_value</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_text</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_element</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_element_child</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_fragment</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_opening_fragment</code> with <code>self</code>.\nCalls Visit<code>::visit_jsx_closing_fragment</code> with <code>self</code>.\nCalls Visit<code>::visit_lit</code> with <code>self</code>.\nCalls Visit<code>::visit_big_int</code> with <code>self</code>.\nCalls Visit<code>::visit_str</code> with <code>self</code>.\nCalls Visit<code>::visit_bool</code> with <code>self</code>.\nCalls Visit<code>::visit_null</code> with <code>self</code>.\nCalls Visit<code>::visit_regex</code> with <code>self</code>.\nCalls Visit<code>::visit_number</code> with <code>self</code>.\nCalls Visit<code>::visit_program</code> with <code>self</code>.\nCalls Visit<code>::visit_module</code> with <code>self</code>.\nCalls Visit<code>::visit_script</code> with <code>self</code>.\nCalls Visit<code>::visit_module_item</code> with <code>self</code>.\nCalls Visit<code>::visit_module_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_export_default_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_export_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_import_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_import_phase</code> with <code>self</code>.\nCalls Visit<code>::visit_export_all</code> with <code>self</code>.\nCalls Visit<code>::visit_named_export</code> with <code>self</code>.\nCalls Visit<code>::visit_export_default_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_default_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_import_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_import_default_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_import_star_as_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_import_named_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_export_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_export_namespace_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_export_default_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_export_named_specifier</code> with <code>self</code>.\nCalls Visit<code>::visit_module_export_name</code> with <code>self</code>.\nCalls Visit<code>::visit_binary_op</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_op</code> with <code>self</code>.\nCalls Visit<code>::visit_update_op</code> with <code>self</code>.\nCalls Visit<code>::visit_unary_op</code> with <code>self</code>.\nCalls Visit<code>::visit_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_array_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_object_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_rest_pat</code> with <code>self</code>.\nCalls Visit<code>::visit_object_pat_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_key_value_pat_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_pat_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_key_value_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_assign_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_getter_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_setter_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_method_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_prop_name</code> with <code>self</code>.\nCalls Visit<code>::visit_computed_prop_name</code> with <code>self</code>.\nCalls Visit<code>::visit_block_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_expr_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_empty_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_debugger_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_with_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_return_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_labeled_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_break_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_continue_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_if_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_switch_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_throw_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_try_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_while_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_do_while_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_for_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_for_in_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_for_of_stmt</code> with <code>self</code>.\nCalls Visit<code>::visit_switch_case</code> with <code>self</code>.\nCalls Visit<code>::visit_catch_clause</code> with <code>self</code>.\nCalls Visit<code>::visit_for_head</code> with <code>self</code>.\nCalls Visit<code>::visit_var_decl_or_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_ann</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_param_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_param</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_param_instantiation</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_param_prop</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_param_prop_param</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_qualified_name</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_entity_name</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_element</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_call_signature_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_construct_signature_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_property_signature</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_getter_signature</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_setter_signature</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_method_signature</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_index_signature</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_fn_or_constructor_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_keyword_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_keyword_type_kind</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_this_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_fn_param</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_fn_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_constructor_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_ref</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_predicate</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_this_type_or_ident</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_query</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_query_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_import_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_lit</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_array_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_tuple_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_tuple_element</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_optional_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_rest_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_union_or_intersection_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_union_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_intersection_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_conditional_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_infer_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_parenthesized_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_operator</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_operator_op</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_indexed_access_type</code> with <code>self</code>.\nCalls Visit<code>::visit_true_plus_minus</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_mapped_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_lit_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_lit</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_tpl_lit_type</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_interface_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_interface_body</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_expr_with_type_args</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_alias_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_enum_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_enum_member</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_enum_member_id</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_module_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_namespace_body</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_module_block</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_namespace_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_module_name</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_import_equals_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_module_ref</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_external_module_ref</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_export_assignment</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_namespace_export_decl</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_as_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_type_assertion</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_non_null_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_satisfies_expr</code> with <code>self</code>.\nCalls Visit<code>::visit_accessibility</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_const_assertion</code> with <code>self</code>.\nCalls Visit<code>::visit_ts_instantiation</code> with <code>self</code>.\nCalls Visit<code>::visit_invalid</code> with <code>self</code>.\nCalls Visit<code>::visit_es_version</code> with <code>self</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>While</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>With</code>, and <code>None</code> …\nThe archived counterpart of <code>ImportDecl::with</code>\nThe archived counterpart of <code>ExportAll::with</code>\nThe archived counterpart of <code>NamedExport::with</code>\nCreate a new identifier with the given position.\nCreate a new identifier with the given prefix.\n#Note\nIn <code>op</code>, EqIgnoreSpan of Ident will ignore the syntax …\nPreserve syntax context while drop <code>span.lo</code> and <code>span.hi</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Yield</code>, and <code>None</code> …\nThis collects variables bindings while ignoring if it’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit all children nodes. This converts <code>VisitAll</code> to <code>Visit</code>. …\nA visitor trait for traversing the AST.\nA trait implemented for types that can be visited using a …\nWrap a VisitMut as a Fold\nImplemented for passes which inject variables.\nA visitor trait for traversing the AST.\nA visitor trait for traversing the AST.\nA trait implemented for types that can be visited using a …\nA trait implemented for types that can be visited using a …\nThe returned folder only handles <code>fold_script</code> and …\nThis is not a part of semver-stable API. It is …\nVisit all nodes in self in preorder.\nVisit a node of type <code>Accessibility</code>.\nVisit a node of type <code>ArrayLit</code>.\nVisit a node of type <code>ArrayPat</code>.\nVisit a node of type <code>ArrowExpr</code>.\nVisit a node of type <code>AssignExpr</code>.\nVisit a node of type <code>AssignOp</code>.\nVisit a node of type <code>AssignPat</code>.\nVisit a node of type <code>AssignPatProp</code>.\nVisit a node of type <code>AssignProp</code>.\nVisit a node of type <code>AssignTarget</code>.\nVisit a node of type <code>AssignTargetPat</code>.\nVisit a node of type <code>swc_atoms :: Atom</code>.\nVisit a node of type <code>AutoAccessor</code>.\nVisit a node of type <code>AwaitExpr</code>.\nVisit a node of type <code>BigInt</code>.\nVisit a node of type <code>BigIntValue</code>.\nVisit a node of type <code>BinExpr</code>.\nVisit a node of type <code>BinaryOp</code>.\nVisit a node of type <code>BindingIdent</code>.\nVisit a node of type <code>BlockStmt</code>.\nVisit a node of type <code>BlockStmtOrExpr</code>.\nVisit a node of type <code>Bool</code>.\nVisit a node of type <code>BreakStmt</code>.\nVisit a node of type <code>CallExpr</code>.\nVisit a node of type <code>Callee</code>.\nVisit a node of type <code>CatchClause</code>.\nVisit children nodes of <code>self`` with </code>visitor`.\nVisit a node of type <code>Class</code>.\nVisit a node of type <code>ClassDecl</code>.\nVisit a node of type <code>ClassExpr</code>.\nVisit a node of type <code>ClassMember</code>.\nVisit a node of type <code>Vec &lt; ClassMember &gt;</code>.\nVisit a node of type <code>ClassMethod</code>.\nVisit a node of type <code>ClassProp</code>.\nVisit a node of type <code>ComputedPropName</code>.\nVisit a node of type <code>CondExpr</code>.\nVisit a node of type <code>Constructor</code>.\nVisit a node of type <code>ContinueStmt</code>.\nVisit a node of type <code>DebuggerStmt</code>.\nVisit a node of type <code>Decl</code>.\nVisit a node of type <code>Decorator</code>.\nVisit a node of type <code>Vec &lt; Decorator &gt;</code>.\nVisit a node of type <code>DefaultDecl</code>.\nVisit a node of type <code>DoWhileStmt</code>.\nVisit a node of type <code>EmptyStmt</code>.\nVisit a node of type <code>EsVersion</code>.\nVisit a node of type <code>ExportAll</code>.\nVisit a node of type <code>ExportDecl</code>.\nVisit a node of type <code>ExportDefaultDecl</code>.\nVisit a node of type <code>ExportDefaultExpr</code>.\nVisit a node of type <code>ExportDefaultSpecifier</code>.\nVisit a node of type <code>ExportNamedSpecifier</code>.\nVisit a node of type <code>ExportNamespaceSpecifier</code>.\nVisit a node of type <code>ExportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ExportSpecifier &gt;</code>.\nVisit a node of type <code>Expr</code>.\nVisit a node of type <code>ExprOrSpread</code>.\nVisit a node of type <code>Vec &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>ExprStmt</code>.\nVisit a node of type <code>Vec &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>FnDecl</code>.\nVisit a node of type <code>FnExpr</code>.\nVisit a node of type <code>ForHead</code>.\nVisit a node of type <code>ForInStmt</code>.\nVisit a node of type <code>ForOfStmt</code>.\nVisit a node of type <code>ForStmt</code>.\nVisit a node of type <code>Function</code>.\nVisit a node of type <code>GetterProp</code>.\nVisit a node of type <code>Ident</code>.\nVisit a node of type <code>IdentName</code>.\nVisit a node of type <code>IfStmt</code>.\nVisit a node of type <code>Import</code>.\nVisit a node of type <code>ImportDecl</code>.\nVisit a node of type <code>ImportDefaultSpecifier</code>.\nVisit a node of type <code>ImportNamedSpecifier</code>.\nVisit a node of type <code>ImportPhase</code>.\nVisit a node of type <code>ImportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ImportSpecifier &gt;</code>.\nVisit a node of type <code>ImportStarAsSpecifier</code>.\nVisit a node of type <code>ImportWith</code>.\nVisit a node of type <code>ImportWithItem</code>.\nVisit a node of type <code>Vec &lt; ImportWithItem &gt;</code>.\nVisit a node of type <code>Invalid</code>.\nVisit a node of type <code>JSXAttr</code>.\nVisit a node of type <code>JSXAttrName</code>.\nVisit a node of type <code>JSXAttrOrSpread</code>.\nVisit a node of type <code>Vec &lt; JSXAttrOrSpread &gt;</code>.\nVisit a node of type <code>JSXAttrValue</code>.\nVisit a node of type <code>JSXClosingElement</code>.\nVisit a node of type <code>JSXClosingFragment</code>.\nVisit a node of type <code>JSXElement</code>.\nVisit a node of type <code>JSXElementChild</code>.\nVisit a node of type <code>Vec &lt; JSXElementChild &gt;</code>.\nVisit a node of type <code>JSXElementName</code>.\nVisit a node of type <code>JSXEmptyExpr</code>.\nVisit a node of type <code>JSXExpr</code>.\nVisit a node of type <code>JSXExprContainer</code>.\nVisit a node of type <code>JSXFragment</code>.\nVisit a node of type <code>JSXMemberExpr</code>.\nVisit a node of type <code>JSXNamespacedName</code>.\nVisit a node of type <code>JSXObject</code>.\nVisit a node of type <code>JSXOpeningElement</code>.\nVisit a node of type <code>JSXOpeningFragment</code>.\nVisit a node of type <code>JSXSpreadChild</code>.\nVisit a node of type <code>JSXText</code>.\nVisit a node of type <code>Key</code>.\nVisit a node of type <code>KeyValuePatProp</code>.\nVisit a node of type <code>KeyValueProp</code>.\nVisit a node of type <code>LabeledStmt</code>.\nVisit a node of type <code>Lit</code>.\nVisit a node of type <code>MemberExpr</code>.\nVisit a node of type <code>MemberProp</code>.\nVisit a node of type <code>MetaPropExpr</code>.\nVisit a node of type <code>MetaPropKind</code>.\nVisit a node of type <code>MethodKind</code>.\nVisit a node of type <code>MethodProp</code>.\nVisit a node of type <code>Module</code>.\nVisit a node of type <code>ModuleDecl</code>.\nVisit a node of type <code>ModuleExportName</code>.\nVisit a node of type <code>ModuleItem</code>.\nVisit a node of type <code>Vec &lt; ModuleItem &gt;</code>.\nVisit a node of type <code>NamedExport</code>.\nVisit a node of type <code>NewExpr</code>.\nVisit a node of type <code>Null</code>.\nVisit a node of type <code>Number</code>.\nVisit a node of type <code>ObjectLit</code>.\nVisit a node of type <code>ObjectPat</code>.\nVisit a node of type <code>ObjectPatProp</code>.\nVisit a node of type <code>Vec &lt; ObjectPatProp &gt;</code>.\nVisit a node of type <code>Option &lt; Accessibility &gt;</code>.\nVisit a node of type <code>Option &lt; swc_atoms :: Atom &gt;</code>.\nVisit a node of type <code>Option &lt; BlockStmt &gt;</code>.\nVisit a node of type <code>OptCall</code>.\nVisit a node of type <code>Option &lt; CatchClause &gt;</code>.\nVisit a node of type <code>OptChainBase</code>.\nVisit a node of type <code>OptChainExpr</code>.\nVisit a node of type <code>Option &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>Option &lt; Vec &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Ident &gt;</code>.\nVisit a node of type <code>Option &lt; JSXAttrValue &gt;</code>.\nVisit a node of type <code>Option &lt; JSXClosingElement &gt;</code>.\nVisit a node of type <code>Option &lt; ModuleExportName &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; ObjectLit &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Pat &gt;</code>.\nVisit a node of type <code>Option &lt; swc_common :: Span &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Stmt &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Str &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; TruePlusMinus &gt;</code>.\nVisit a node of type <code>Option &lt; TsEntityName &gt;</code>.\nVisit a node of type <code>Option &lt; TsNamespaceBody &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeAnn &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeParamDecl &gt; &gt;</code>.\nVisit a node of type …\nVisit a node of type <code>Option &lt; VarDeclOrExpr &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; Pat &gt; &gt;</code>.\nVisit a node of type <code>Param</code>.\nVisit a node of type <code>ParamOrTsParamProp</code>.\nVisit a node of type <code>Vec &lt; ParamOrTsParamProp &gt;</code>.\nVisit a node of type <code>Vec &lt; Param &gt;</code>.\nVisit a node of type <code>ParenExpr</code>.\nVisit a node of type <code>Pat</code>.\nVisit a node of type <code>Vec &lt; Pat &gt;</code>.\nVisit a node of type <code>PrivateMethod</code>.\nVisit a node of type <code>PrivateName</code>.\nVisit a node of type <code>PrivateProp</code>.\nVisit a node of type <code>Program</code>.\nVisit a node of type <code>Prop</code>.\nVisit a node of type <code>PropName</code>.\nVisit a node of type <code>PropOrSpread</code>.\nVisit a node of type <code>Vec &lt; PropOrSpread &gt;</code>.\nVisit a node of type <code>Regex</code>.\nVisit a node of type <code>RestPat</code>.\nVisit a node of type <code>ReturnStmt</code>.\nVisit a node of type <code>Script</code>.\nVisit a node of type <code>SeqExpr</code>.\nVisit a node of type <code>SetterProp</code>.\nVisit a node of type <code>SimpleAssignTarget</code>.\nVisit a node of type <code>swc_common :: Span</code>.\nVisit a node of type <code>SpreadElement</code>.\nVisit a node of type <code>StaticBlock</code>.\nVisit a node of type <code>Stmt</code>.\nVisit a node of type <code>Vec &lt; Stmt &gt;</code>.\nVisit a node of type <code>Str</code>.\nVisit a node of type <code>Super</code>.\nVisit a node of type <code>SuperProp</code>.\nVisit a node of type <code>SuperPropExpr</code>.\nVisit a node of type <code>SwitchCase</code>.\nVisit a node of type <code>Vec &lt; SwitchCase &gt;</code>.\nVisit a node of type <code>SwitchStmt</code>.\nVisit a node of type <code>swc_common :: SyntaxContext</code>.\nVisit a node of type <code>TaggedTpl</code>.\nVisit a node of type <code>ThisExpr</code>.\nVisit a node of type <code>ThrowStmt</code>.\nVisit a node of type <code>Tpl</code>.\nVisit a node of type <code>TplElement</code>.\nVisit a node of type <code>Vec &lt; TplElement &gt;</code>.\nVisit a node of type <code>TruePlusMinus</code>.\nVisit a node of type <code>TryStmt</code>.\nVisit a node of type <code>TsArrayType</code>.\nVisit a node of type <code>TsAsExpr</code>.\nVisit a node of type <code>TsCallSignatureDecl</code>.\nVisit a node of type <code>TsConditionalType</code>.\nVisit a node of type <code>TsConstAssertion</code>.\nVisit a node of type <code>TsConstructSignatureDecl</code>.\nVisit a node of type <code>TsConstructorType</code>.\nVisit a node of type <code>TsEntityName</code>.\nVisit a node of type <code>TsEnumDecl</code>.\nVisit a node of type <code>TsEnumMember</code>.\nVisit a node of type <code>TsEnumMemberId</code>.\nVisit a node of type <code>Vec &lt; TsEnumMember &gt;</code>.\nVisit a node of type <code>TsExportAssignment</code>.\nVisit a node of type <code>TsExprWithTypeArgs</code>.\nVisit a node of type <code>Vec &lt; TsExprWithTypeArgs &gt;</code>.\nVisit a node of type <code>TsExternalModuleRef</code>.\nVisit a node of type <code>TsFnOrConstructorType</code>.\nVisit a node of type <code>TsFnParam</code>.\nVisit a node of type <code>Vec &lt; TsFnParam &gt;</code>.\nVisit a node of type <code>TsFnType</code>.\nVisit a node of type <code>TsGetterSignature</code>.\nVisit a node of type <code>TsImportEqualsDecl</code>.\nVisit a node of type <code>TsImportType</code>.\nVisit a node of type <code>TsIndexSignature</code>.\nVisit a node of type <code>TsIndexedAccessType</code>.\nVisit a node of type <code>TsInferType</code>.\nVisit a node of type <code>TsInstantiation</code>.\nVisit a node of type <code>TsInterfaceBody</code>.\nVisit a node of type <code>TsInterfaceDecl</code>.\nVisit a node of type <code>TsIntersectionType</code>.\nVisit a node of type <code>TsKeywordType</code>.\nVisit a node of type <code>TsKeywordTypeKind</code>.\nVisit a node of type <code>TsLit</code>.\nVisit a node of type <code>TsLitType</code>.\nVisit a node of type <code>TsMappedType</code>.\nVisit a node of type <code>TsMethodSignature</code>.\nVisit a node of type <code>TsModuleBlock</code>.\nVisit a node of type <code>TsModuleDecl</code>.\nVisit a node of type <code>TsModuleName</code>.\nVisit a node of type <code>TsModuleRef</code>.\nVisit a node of type <code>TsNamespaceBody</code>.\nVisit a node of type <code>TsNamespaceDecl</code>.\nVisit a node of type <code>TsNamespaceExportDecl</code>.\nVisit a node of type <code>TsNonNullExpr</code>.\nVisit a node of type <code>TsOptionalType</code>.\nVisit a node of type <code>TsParamProp</code>.\nVisit a node of type <code>TsParamPropParam</code>.\nVisit a node of type <code>TsParenthesizedType</code>.\nVisit a node of type <code>TsPropertySignature</code>.\nVisit a node of type <code>TsQualifiedName</code>.\nVisit a node of type <code>TsRestType</code>.\nVisit a node of type <code>TsSatisfiesExpr</code>.\nVisit a node of type <code>TsSetterSignature</code>.\nVisit a node of type <code>TsThisType</code>.\nVisit a node of type <code>TsThisTypeOrIdent</code>.\nVisit a node of type <code>TsTplLitType</code>.\nVisit a node of type <code>TsTupleElement</code>.\nVisit a node of type <code>Vec &lt; TsTupleElement &gt;</code>.\nVisit a node of type <code>TsTupleType</code>.\nVisit a node of type <code>TsType</code>.\nVisit a node of type <code>TsTypeAliasDecl</code>.\nVisit a node of type <code>TsTypeAnn</code>.\nVisit a node of type <code>TsTypeAssertion</code>.\nVisit a node of type <code>TsTypeElement</code>.\nVisit a node of type <code>Vec &lt; TsTypeElement &gt;</code>.\nVisit a node of type <code>TsTypeLit</code>.\nVisit a node of type <code>TsTypeOperator</code>.\nVisit a node of type <code>TsTypeOperatorOp</code>.\nVisit a node of type <code>TsTypeParam</code>.\nVisit a node of type <code>TsTypeParamDecl</code>.\nVisit a node of type <code>TsTypeParamInstantiation</code>.\nVisit a node of type <code>Vec &lt; TsTypeParam &gt;</code>.\nVisit a node of type <code>TsTypePredicate</code>.\nVisit a node of type <code>TsTypeQuery</code>.\nVisit a node of type <code>TsTypeQueryExpr</code>.\nVisit a node of type <code>TsTypeRef</code>.\nVisit a node of type <code>Vec &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>TsUnionOrIntersectionType</code>.\nVisit a node of type <code>TsUnionType</code>.\nVisit a node of type <code>UnaryExpr</code>.\nVisit a node of type <code>UnaryOp</code>.\nVisit a node of type <code>UpdateExpr</code>.\nVisit a node of type <code>UpdateOp</code>.\nVisit a node of type <code>UsingDecl</code>.\nVisit a node of type <code>VarDecl</code>.\nVisit a node of type <code>VarDeclKind</code>.\nVisit a node of type <code>VarDeclOrExpr</code>.\nVisit a node of type <code>VarDeclarator</code>.\nVisit a node of type <code>Vec &lt; VarDeclarator &gt;</code>.\nVisit a node of type <code>WhileStmt</code>.\nCalls a visitor method (visitor.fold_xxx) with self.\nVisit a node of type <code>WithStmt</code>.\nVisit a node of type <code>YieldExpr</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNote: Ignoring more types is not considered as a breaking …\nNote: Ignoring more types is not considered as a breaking …\nNote: Ignoring more types is not considered as a breaking …\nReturns a <code>Fold</code> which changes all span into <code>DUMMY_SP</code>.\nMark visitor as ECMAScript standard only and mark other …\nMark visitor as ECMAScript standard only and mark other …\nMark visitor as ECMAScript standard only and mark other …\nVisit a node of type <code>Accessibility</code>.\nVisit a node of type <code>ArrayLit</code>.\nVisit a node of type <code>ArrayPat</code>.\nVisit a node of type <code>ArrowExpr</code>.\nVisit a node of type <code>AssignExpr</code>.\nVisit a node of type <code>AssignOp</code>.\nVisit a node of type <code>AssignPat</code>.\nVisit a node of type <code>AssignPatProp</code>.\nVisit a node of type <code>AssignProp</code>.\nVisit a node of type <code>AssignTarget</code>.\nVisit a node of type <code>AssignTargetPat</code>.\nVisit a node of type <code>swc_atoms :: Atom</code>.\nVisit a node of type <code>AutoAccessor</code>.\nVisit a node of type <code>AwaitExpr</code>.\nVisit a node of type <code>BigInt</code>.\nVisit a node of type <code>BigIntValue</code>.\nVisit a node of type <code>BinExpr</code>.\nVisit a node of type <code>BinaryOp</code>.\nVisit a node of type <code>BindingIdent</code>.\nVisit a node of type <code>BlockStmt</code>.\nVisit a node of type <code>BlockStmtOrExpr</code>.\nVisit a node of type <code>Bool</code>.\nVisit a node of type <code>BreakStmt</code>.\nVisit a node of type <code>CallExpr</code>.\nVisit a node of type <code>Callee</code>.\nVisit a node of type <code>CatchClause</code>.\nVisit children nodes of <code>self`` with </code>visitor`.\nVisit a node of type <code>Class</code>.\nVisit a node of type <code>ClassDecl</code>.\nVisit a node of type <code>ClassExpr</code>.\nVisit a node of type <code>ClassMember</code>.\nVisit a node of type <code>Vec &lt; ClassMember &gt;</code>.\nVisit a node of type <code>ClassMethod</code>.\nVisit a node of type <code>ClassProp</code>.\nVisit a node of type <code>ComputedPropName</code>.\nVisit a node of type <code>CondExpr</code>.\nVisit a node of type <code>Constructor</code>.\nVisit a node of type <code>ContinueStmt</code>.\nVisit a node of type <code>DebuggerStmt</code>.\nVisit a node of type <code>Decl</code>.\nVisit a node of type <code>Decorator</code>.\nVisit a node of type <code>Vec &lt; Decorator &gt;</code>.\nVisit a node of type <code>DefaultDecl</code>.\nVisit a node of type <code>DoWhileStmt</code>.\nVisit a node of type <code>EmptyStmt</code>.\nVisit a node of type <code>EsVersion</code>.\nVisit a node of type <code>ExportAll</code>.\nVisit a node of type <code>ExportDecl</code>.\nVisit a node of type <code>ExportDefaultDecl</code>.\nVisit a node of type <code>ExportDefaultExpr</code>.\nVisit a node of type <code>ExportDefaultSpecifier</code>.\nVisit a node of type <code>ExportNamedSpecifier</code>.\nVisit a node of type <code>ExportNamespaceSpecifier</code>.\nVisit a node of type <code>ExportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ExportSpecifier &gt;</code>.\nVisit a node of type <code>Expr</code>.\nVisit a node of type <code>ExprOrSpread</code>.\nVisit a node of type <code>Vec &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>ExprStmt</code>.\nVisit a node of type <code>Vec &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>FnDecl</code>.\nVisit a node of type <code>FnExpr</code>.\nVisit a node of type <code>ForHead</code>.\nVisit a node of type <code>ForInStmt</code>.\nVisit a node of type <code>ForOfStmt</code>.\nVisit a node of type <code>ForStmt</code>.\nVisit a node of type <code>Function</code>.\nVisit a node of type <code>GetterProp</code>.\nVisit a node of type <code>Ident</code>.\nVisit a node of type <code>IdentName</code>.\nVisit a node of type <code>IfStmt</code>.\nVisit a node of type <code>Import</code>.\nVisit a node of type <code>ImportDecl</code>.\nVisit a node of type <code>ImportDefaultSpecifier</code>.\nVisit a node of type <code>ImportNamedSpecifier</code>.\nVisit a node of type <code>ImportPhase</code>.\nVisit a node of type <code>ImportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ImportSpecifier &gt;</code>.\nVisit a node of type <code>ImportStarAsSpecifier</code>.\nVisit a node of type <code>ImportWith</code>.\nVisit a node of type <code>ImportWithItem</code>.\nVisit a node of type <code>Vec &lt; ImportWithItem &gt;</code>.\nVisit a node of type <code>Invalid</code>.\nVisit a node of type <code>JSXAttr</code>.\nVisit a node of type <code>JSXAttrName</code>.\nVisit a node of type <code>JSXAttrOrSpread</code>.\nVisit a node of type <code>Vec &lt; JSXAttrOrSpread &gt;</code>.\nVisit a node of type <code>JSXAttrValue</code>.\nVisit a node of type <code>JSXClosingElement</code>.\nVisit a node of type <code>JSXClosingFragment</code>.\nVisit a node of type <code>JSXElement</code>.\nVisit a node of type <code>JSXElementChild</code>.\nVisit a node of type <code>Vec &lt; JSXElementChild &gt;</code>.\nVisit a node of type <code>JSXElementName</code>.\nVisit a node of type <code>JSXEmptyExpr</code>.\nVisit a node of type <code>JSXExpr</code>.\nVisit a node of type <code>JSXExprContainer</code>.\nVisit a node of type <code>JSXFragment</code>.\nVisit a node of type <code>JSXMemberExpr</code>.\nVisit a node of type <code>JSXNamespacedName</code>.\nVisit a node of type <code>JSXObject</code>.\nVisit a node of type <code>JSXOpeningElement</code>.\nVisit a node of type <code>JSXOpeningFragment</code>.\nVisit a node of type <code>JSXSpreadChild</code>.\nVisit a node of type <code>JSXText</code>.\nVisit a node of type <code>Key</code>.\nVisit a node of type <code>KeyValuePatProp</code>.\nVisit a node of type <code>KeyValueProp</code>.\nVisit a node of type <code>LabeledStmt</code>.\nVisit a node of type <code>Lit</code>.\nVisit a node of type <code>MemberExpr</code>.\nVisit a node of type <code>MemberProp</code>.\nVisit a node of type <code>MetaPropExpr</code>.\nVisit a node of type <code>MetaPropKind</code>.\nVisit a node of type <code>MethodKind</code>.\nVisit a node of type <code>MethodProp</code>.\nVisit a node of type <code>Module</code>.\nVisit a node of type <code>ModuleDecl</code>.\nVisit a node of type <code>ModuleExportName</code>.\nVisit a node of type <code>ModuleItem</code>.\nVisit a node of type <code>Vec &lt; ModuleItem &gt;</code>.\nVisit a node of type <code>Accessibility</code>.\nVisit a node of type <code>ArrayLit</code>.\nVisit a node of type <code>ArrayPat</code>.\nVisit a node of type <code>ArrowExpr</code>.\nVisit a node of type <code>AssignExpr</code>.\nVisit a node of type <code>AssignOp</code>.\nVisit a node of type <code>AssignPat</code>.\nVisit a node of type <code>AssignPatProp</code>.\nVisit a node of type <code>AssignProp</code>.\nVisit a node of type <code>AssignTarget</code>.\nVisit a node of type <code>AssignTargetPat</code>.\nVisit a node of type <code>swc_atoms :: Atom</code>.\nVisit a node of type <code>AutoAccessor</code>.\nVisit a node of type <code>AwaitExpr</code>.\nVisit a node of type <code>BigInt</code>.\nVisit a node of type <code>BigIntValue</code>.\nVisit a node of type <code>BinExpr</code>.\nVisit a node of type <code>BinaryOp</code>.\nVisit a node of type <code>BindingIdent</code>.\nVisit a node of type <code>BlockStmt</code>.\nVisit a node of type <code>BlockStmtOrExpr</code>.\nVisit a node of type <code>Bool</code>.\nVisit a node of type <code>BreakStmt</code>.\nVisit a node of type <code>CallExpr</code>.\nVisit a node of type <code>Callee</code>.\nVisit a node of type <code>CatchClause</code>.\nVisit children nodes of <code>self`` with </code>visitor`.\nVisit a node of type <code>Class</code>.\nVisit a node of type <code>ClassDecl</code>.\nVisit a node of type <code>ClassExpr</code>.\nVisit a node of type <code>ClassMember</code>.\nVisit a node of type <code>Vec &lt; ClassMember &gt;</code>.\nVisit a node of type <code>ClassMethod</code>.\nVisit a node of type <code>ClassProp</code>.\nVisit a node of type <code>ComputedPropName</code>.\nVisit a node of type <code>CondExpr</code>.\nVisit a node of type <code>Constructor</code>.\nVisit a node of type <code>ContinueStmt</code>.\nVisit a node of type <code>DebuggerStmt</code>.\nVisit a node of type <code>Decl</code>.\nVisit a node of type <code>Decorator</code>.\nVisit a node of type <code>Vec &lt; Decorator &gt;</code>.\nVisit a node of type <code>DefaultDecl</code>.\nVisit a node of type <code>DoWhileStmt</code>.\nVisit a node of type <code>EmptyStmt</code>.\nVisit a node of type <code>EsVersion</code>.\nVisit a node of type <code>ExportAll</code>.\nVisit a node of type <code>ExportDecl</code>.\nVisit a node of type <code>ExportDefaultDecl</code>.\nVisit a node of type <code>ExportDefaultExpr</code>.\nVisit a node of type <code>ExportDefaultSpecifier</code>.\nVisit a node of type <code>ExportNamedSpecifier</code>.\nVisit a node of type <code>ExportNamespaceSpecifier</code>.\nVisit a node of type <code>ExportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ExportSpecifier &gt;</code>.\nVisit a node of type <code>Expr</code>.\nVisit a node of type <code>ExprOrSpread</code>.\nVisit a node of type <code>Vec &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>ExprStmt</code>.\nVisit a node of type <code>Vec &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>FnDecl</code>.\nVisit a node of type <code>FnExpr</code>.\nVisit a node of type <code>ForHead</code>.\nVisit a node of type <code>ForInStmt</code>.\nVisit a node of type <code>ForOfStmt</code>.\nVisit a node of type <code>ForStmt</code>.\nVisit a node of type <code>Function</code>.\nVisit a node of type <code>GetterProp</code>.\nVisit a node of type <code>Ident</code>.\nVisit a node of type <code>IdentName</code>.\nVisit a node of type <code>IfStmt</code>.\nVisit a node of type <code>Import</code>.\nVisit a node of type <code>ImportDecl</code>.\nVisit a node of type <code>ImportDefaultSpecifier</code>.\nVisit a node of type <code>ImportNamedSpecifier</code>.\nVisit a node of type <code>ImportPhase</code>.\nVisit a node of type <code>ImportSpecifier</code>.\nVisit a node of type <code>Vec &lt; ImportSpecifier &gt;</code>.\nVisit a node of type <code>ImportStarAsSpecifier</code>.\nVisit a node of type <code>ImportWith</code>.\nVisit a node of type <code>ImportWithItem</code>.\nVisit a node of type <code>Vec &lt; ImportWithItem &gt;</code>.\nVisit a node of type <code>Invalid</code>.\nVisit a node of type <code>JSXAttr</code>.\nVisit a node of type <code>JSXAttrName</code>.\nVisit a node of type <code>JSXAttrOrSpread</code>.\nVisit a node of type <code>Vec &lt; JSXAttrOrSpread &gt;</code>.\nVisit a node of type <code>JSXAttrValue</code>.\nVisit a node of type <code>JSXClosingElement</code>.\nVisit a node of type <code>JSXClosingFragment</code>.\nVisit a node of type <code>JSXElement</code>.\nVisit a node of type <code>JSXElementChild</code>.\nVisit a node of type <code>Vec &lt; JSXElementChild &gt;</code>.\nVisit a node of type <code>JSXElementName</code>.\nVisit a node of type <code>JSXEmptyExpr</code>.\nVisit a node of type <code>JSXExpr</code>.\nVisit a node of type <code>JSXExprContainer</code>.\nVisit a node of type <code>JSXFragment</code>.\nVisit a node of type <code>JSXMemberExpr</code>.\nVisit a node of type <code>JSXNamespacedName</code>.\nVisit a node of type <code>JSXObject</code>.\nVisit a node of type <code>JSXOpeningElement</code>.\nVisit a node of type <code>JSXOpeningFragment</code>.\nVisit a node of type <code>JSXSpreadChild</code>.\nVisit a node of type <code>JSXText</code>.\nVisit a node of type <code>Key</code>.\nVisit a node of type <code>KeyValuePatProp</code>.\nVisit a node of type <code>KeyValueProp</code>.\nVisit a node of type <code>LabeledStmt</code>.\nVisit a node of type <code>Lit</code>.\nVisit a node of type <code>MemberExpr</code>.\nVisit a node of type <code>MemberProp</code>.\nVisit a node of type <code>MetaPropExpr</code>.\nVisit a node of type <code>MetaPropKind</code>.\nVisit a node of type <code>MethodKind</code>.\nVisit a node of type <code>MethodProp</code>.\nVisit a node of type <code>Module</code>.\nVisit a node of type <code>ModuleDecl</code>.\nVisit a node of type <code>ModuleExportName</code>.\nVisit a node of type <code>ModuleItem</code>.\nVisit a node of type <code>Vec &lt; ModuleItem &gt;</code>.\nVisit a node of type <code>NamedExport</code>.\nVisit a node of type <code>NewExpr</code>.\nVisit a node of type <code>Null</code>.\nVisit a node of type <code>Number</code>.\nVisit a node of type <code>ObjectLit</code>.\nVisit a node of type <code>ObjectPat</code>.\nVisit a node of type <code>ObjectPatProp</code>.\nVisit a node of type <code>Vec &lt; ObjectPatProp &gt;</code>.\nVisit a node of type <code>Option &lt; Accessibility &gt;</code>.\nVisit a node of type <code>Option &lt; swc_atoms :: Atom &gt;</code>.\nVisit a node of type <code>Option &lt; BlockStmt &gt;</code>.\nVisit a node of type <code>OptCall</code>.\nVisit a node of type <code>Option &lt; CatchClause &gt;</code>.\nVisit a node of type <code>OptChainBase</code>.\nVisit a node of type <code>OptChainExpr</code>.\nVisit a node of type <code>Option &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>Option &lt; Vec &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Ident &gt;</code>.\nVisit a node of type <code>Option &lt; JSXAttrValue &gt;</code>.\nVisit a node of type <code>Option &lt; JSXClosingElement &gt;</code>.\nVisit a node of type <code>Option &lt; ModuleExportName &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; ObjectLit &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Pat &gt;</code>.\nVisit a node of type <code>Option &lt; swc_common :: Span &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Stmt &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Str &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; TruePlusMinus &gt;</code>.\nVisit a node of type <code>Option &lt; TsEntityName &gt;</code>.\nVisit a node of type <code>Option &lt; TsNamespaceBody &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeAnn &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeParamDecl &gt; &gt;</code>.\nVisit a node of type …\nVisit a node of type <code>Option &lt; VarDeclOrExpr &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; Pat &gt; &gt;</code>.\nVisit a node of type <code>Param</code>.\nVisit a node of type <code>ParamOrTsParamProp</code>.\nVisit a node of type <code>Vec &lt; ParamOrTsParamProp &gt;</code>.\nVisit a node of type <code>Vec &lt; Param &gt;</code>.\nVisit a node of type <code>ParenExpr</code>.\nVisit a node of type <code>Pat</code>.\nVisit a node of type <code>Vec &lt; Pat &gt;</code>.\nVisit a node of type <code>PrivateMethod</code>.\nVisit a node of type <code>PrivateName</code>.\nVisit a node of type <code>PrivateProp</code>.\nVisit a node of type <code>Program</code>.\nVisit a node of type <code>Prop</code>.\nVisit a node of type <code>PropName</code>.\nVisit a node of type <code>PropOrSpread</code>.\nVisit a node of type <code>Vec &lt; PropOrSpread &gt;</code>.\nVisit a node of type <code>Regex</code>.\nVisit a node of type <code>RestPat</code>.\nVisit a node of type <code>ReturnStmt</code>.\nVisit a node of type <code>Script</code>.\nVisit a node of type <code>SeqExpr</code>.\nVisit a node of type <code>SetterProp</code>.\nVisit a node of type <code>SimpleAssignTarget</code>.\nVisit a node of type <code>swc_common :: Span</code>.\nVisit a node of type <code>SpreadElement</code>.\nVisit a node of type <code>StaticBlock</code>.\nVisit a node of type <code>Stmt</code>.\nVisit a node of type <code>Vec &lt; Stmt &gt;</code>.\nVisit a node of type <code>Str</code>.\nVisit a node of type <code>Super</code>.\nVisit a node of type <code>SuperProp</code>.\nVisit a node of type <code>SuperPropExpr</code>.\nVisit a node of type <code>SwitchCase</code>.\nVisit a node of type <code>Vec &lt; SwitchCase &gt;</code>.\nVisit a node of type <code>SwitchStmt</code>.\nVisit a node of type <code>swc_common :: SyntaxContext</code>.\nVisit a node of type <code>TaggedTpl</code>.\nVisit a node of type <code>ThisExpr</code>.\nVisit a node of type <code>ThrowStmt</code>.\nVisit a node of type <code>Tpl</code>.\nVisit a node of type <code>TplElement</code>.\nVisit a node of type <code>Vec &lt; TplElement &gt;</code>.\nVisit a node of type <code>TruePlusMinus</code>.\nVisit a node of type <code>TryStmt</code>.\nVisit a node of type <code>TsArrayType</code>.\nVisit a node of type <code>TsAsExpr</code>.\nVisit a node of type <code>TsCallSignatureDecl</code>.\nVisit a node of type <code>TsConditionalType</code>.\nVisit a node of type <code>TsConstAssertion</code>.\nVisit a node of type <code>TsConstructSignatureDecl</code>.\nVisit a node of type <code>TsConstructorType</code>.\nVisit a node of type <code>TsEntityName</code>.\nVisit a node of type <code>TsEnumDecl</code>.\nVisit a node of type <code>TsEnumMember</code>.\nVisit a node of type <code>TsEnumMemberId</code>.\nVisit a node of type <code>Vec &lt; TsEnumMember &gt;</code>.\nVisit a node of type <code>TsExportAssignment</code>.\nVisit a node of type <code>TsExprWithTypeArgs</code>.\nVisit a node of type <code>Vec &lt; TsExprWithTypeArgs &gt;</code>.\nVisit a node of type <code>TsExternalModuleRef</code>.\nVisit a node of type <code>TsFnOrConstructorType</code>.\nVisit a node of type <code>TsFnParam</code>.\nVisit a node of type <code>Vec &lt; TsFnParam &gt;</code>.\nVisit a node of type <code>TsFnType</code>.\nVisit a node of type <code>TsGetterSignature</code>.\nVisit a node of type <code>TsImportEqualsDecl</code>.\nVisit a node of type <code>TsImportType</code>.\nVisit a node of type <code>TsIndexSignature</code>.\nVisit a node of type <code>TsIndexedAccessType</code>.\nVisit a node of type <code>TsInferType</code>.\nVisit a node of type <code>TsInstantiation</code>.\nVisit a node of type <code>TsInterfaceBody</code>.\nVisit a node of type <code>TsInterfaceDecl</code>.\nVisit a node of type <code>TsIntersectionType</code>.\nVisit a node of type <code>TsKeywordType</code>.\nVisit a node of type <code>TsKeywordTypeKind</code>.\nVisit a node of type <code>TsLit</code>.\nVisit a node of type <code>TsLitType</code>.\nVisit a node of type <code>TsMappedType</code>.\nVisit a node of type <code>TsMethodSignature</code>.\nVisit a node of type <code>TsModuleBlock</code>.\nVisit a node of type <code>TsModuleDecl</code>.\nVisit a node of type <code>TsModuleName</code>.\nVisit a node of type <code>TsModuleRef</code>.\nVisit a node of type <code>TsNamespaceBody</code>.\nVisit a node of type <code>TsNamespaceDecl</code>.\nVisit a node of type <code>TsNamespaceExportDecl</code>.\nVisit a node of type <code>TsNonNullExpr</code>.\nVisit a node of type <code>TsOptionalType</code>.\nVisit a node of type <code>TsParamProp</code>.\nVisit a node of type <code>TsParamPropParam</code>.\nVisit a node of type <code>TsParenthesizedType</code>.\nVisit a node of type <code>TsPropertySignature</code>.\nVisit a node of type <code>TsQualifiedName</code>.\nVisit a node of type <code>TsRestType</code>.\nVisit a node of type <code>TsSatisfiesExpr</code>.\nVisit a node of type <code>TsSetterSignature</code>.\nVisit a node of type <code>TsThisType</code>.\nVisit a node of type <code>TsThisTypeOrIdent</code>.\nVisit a node of type <code>TsTplLitType</code>.\nVisit a node of type <code>TsTupleElement</code>.\nVisit a node of type <code>Vec &lt; TsTupleElement &gt;</code>.\nVisit a node of type <code>TsTupleType</code>.\nVisit a node of type <code>TsType</code>.\nVisit a node of type <code>TsTypeAliasDecl</code>.\nVisit a node of type <code>TsTypeAnn</code>.\nVisit a node of type <code>TsTypeAssertion</code>.\nVisit a node of type <code>TsTypeElement</code>.\nVisit a node of type <code>Vec &lt; TsTypeElement &gt;</code>.\nVisit a node of type <code>TsTypeLit</code>.\nVisit a node of type <code>TsTypeOperator</code>.\nVisit a node of type <code>TsTypeOperatorOp</code>.\nVisit a node of type <code>TsTypeParam</code>.\nVisit a node of type <code>TsTypeParamDecl</code>.\nVisit a node of type <code>TsTypeParamInstantiation</code>.\nVisit a node of type <code>Vec &lt; TsTypeParam &gt;</code>.\nVisit a node of type <code>TsTypePredicate</code>.\nVisit a node of type <code>TsTypeQuery</code>.\nVisit a node of type <code>TsTypeQueryExpr</code>.\nVisit a node of type <code>TsTypeRef</code>.\nVisit a node of type <code>Vec &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>TsUnionOrIntersectionType</code>.\nVisit a node of type <code>TsUnionType</code>.\nVisit a node of type <code>UnaryExpr</code>.\nVisit a node of type <code>UnaryOp</code>.\nVisit a node of type <code>UpdateExpr</code>.\nVisit a node of type <code>UpdateOp</code>.\nVisit a node of type <code>UsingDecl</code>.\nVisit a node of type <code>VarDecl</code>.\nVisit a node of type <code>VarDeclKind</code>.\nVisit a node of type <code>VarDeclOrExpr</code>.\nVisit a node of type <code>VarDeclarator</code>.\nVisit a node of type <code>Vec &lt; VarDeclarator &gt;</code>.\nVisit a node of type <code>WhileStmt</code>.\nCalls a visitor method (visitor.fold_xxx) with self.\nVisit a node of type <code>WithStmt</code>.\nVisit a node of type <code>YieldExpr</code>.\nVisit a node of type <code>NamedExport</code>.\nVisit a node of type <code>NewExpr</code>.\nVisit a node of type <code>Null</code>.\nVisit a node of type <code>Number</code>.\nVisit a node of type <code>ObjectLit</code>.\nVisit a node of type <code>ObjectPat</code>.\nVisit a node of type <code>ObjectPatProp</code>.\nVisit a node of type <code>Vec &lt; ObjectPatProp &gt;</code>.\nVisit a node of type <code>Option &lt; Accessibility &gt;</code>.\nVisit a node of type <code>Option &lt; swc_atoms :: Atom &gt;</code>.\nVisit a node of type <code>Option &lt; BlockStmt &gt;</code>.\nVisit a node of type <code>OptCall</code>.\nVisit a node of type <code>Option &lt; CatchClause &gt;</code>.\nVisit a node of type <code>OptChainBase</code>.\nVisit a node of type <code>OptChainExpr</code>.\nVisit a node of type <code>Option &lt; Box &lt; Expr &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; ExprOrSpread &gt;</code>.\nVisit a node of type <code>Option &lt; Vec &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Ident &gt;</code>.\nVisit a node of type <code>Option &lt; JSXAttrValue &gt;</code>.\nVisit a node of type <code>Option &lt; JSXClosingElement &gt;</code>.\nVisit a node of type <code>Option &lt; ModuleExportName &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; ObjectLit &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Pat &gt;</code>.\nVisit a node of type <code>Option &lt; swc_common :: Span &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Stmt &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; Str &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; TruePlusMinus &gt;</code>.\nVisit a node of type <code>Option &lt; TsEntityName &gt;</code>.\nVisit a node of type <code>Option &lt; TsNamespaceBody &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeAnn &gt; &gt;</code>.\nVisit a node of type <code>Option &lt; Box &lt; TsTypeParamDecl &gt; &gt;</code>.\nVisit a node of type …\nVisit a node of type <code>Option &lt; VarDeclOrExpr &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; ExprOrSpread &gt; &gt;</code>.\nVisit a node of type <code>Vec &lt; Option &lt; Pat &gt; &gt;</code>.\nVisit a node of type <code>Param</code>.\nVisit a node of type <code>ParamOrTsParamProp</code>.\nVisit a node of type <code>Vec &lt; ParamOrTsParamProp &gt;</code>.\nVisit a node of type <code>Vec &lt; Param &gt;</code>.\nVisit a node of type <code>ParenExpr</code>.\nVisit a node of type <code>Pat</code>.\nVisit a node of type <code>Vec &lt; Pat &gt;</code>.\nVisit a node of type <code>PrivateMethod</code>.\nVisit a node of type <code>PrivateName</code>.\nVisit a node of type <code>PrivateProp</code>.\nVisit a node of type <code>Program</code>.\nVisit a node of type <code>Prop</code>.\nVisit a node of type <code>PropName</code>.\nVisit a node of type <code>PropOrSpread</code>.\nVisit a node of type <code>Vec &lt; PropOrSpread &gt;</code>.\nVisit a node of type <code>Regex</code>.\nVisit a node of type <code>RestPat</code>.\nVisit a node of type <code>ReturnStmt</code>.\nVisit a node of type <code>Script</code>.\nVisit a node of type <code>SeqExpr</code>.\nVisit a node of type <code>SetterProp</code>.\nVisit a node of type <code>SimpleAssignTarget</code>.\nVisit a node of type <code>swc_common :: Span</code>.\nVisit a node of type <code>SpreadElement</code>.\nVisit a node of type <code>StaticBlock</code>.\nVisit a node of type <code>Stmt</code>.\nVisit a node of type <code>Vec &lt; Stmt &gt;</code>.\nVisit a node of type <code>Str</code>.\nVisit a node of type <code>Super</code>.\nVisit a node of type <code>SuperProp</code>.\nVisit a node of type <code>SuperPropExpr</code>.\nVisit a node of type <code>SwitchCase</code>.\nVisit a node of type <code>Vec &lt; SwitchCase &gt;</code>.\nVisit a node of type <code>SwitchStmt</code>.\nVisit a node of type <code>swc_common :: SyntaxContext</code>.\nVisit a node of type <code>TaggedTpl</code>.\nVisit a node of type <code>ThisExpr</code>.\nVisit a node of type <code>ThrowStmt</code>.\nVisit a node of type <code>Tpl</code>.\nVisit a node of type <code>TplElement</code>.\nVisit a node of type <code>Vec &lt; TplElement &gt;</code>.\nVisit a node of type <code>TruePlusMinus</code>.\nVisit a node of type <code>TryStmt</code>.\nVisit a node of type <code>TsArrayType</code>.\nVisit a node of type <code>TsAsExpr</code>.\nVisit a node of type <code>TsCallSignatureDecl</code>.\nVisit a node of type <code>TsConditionalType</code>.\nVisit a node of type <code>TsConstAssertion</code>.\nVisit a node of type <code>TsConstructSignatureDecl</code>.\nVisit a node of type <code>TsConstructorType</code>.\nVisit a node of type <code>TsEntityName</code>.\nVisit a node of type <code>TsEnumDecl</code>.\nVisit a node of type <code>TsEnumMember</code>.\nVisit a node of type <code>TsEnumMemberId</code>.\nVisit a node of type <code>Vec &lt; TsEnumMember &gt;</code>.\nVisit a node of type <code>TsExportAssignment</code>.\nVisit a node of type <code>TsExprWithTypeArgs</code>.\nVisit a node of type <code>Vec &lt; TsExprWithTypeArgs &gt;</code>.\nVisit a node of type <code>TsExternalModuleRef</code>.\nVisit a node of type <code>TsFnOrConstructorType</code>.\nVisit a node of type <code>TsFnParam</code>.\nVisit a node of type <code>Vec &lt; TsFnParam &gt;</code>.\nVisit a node of type <code>TsFnType</code>.\nVisit a node of type <code>TsGetterSignature</code>.\nVisit a node of type <code>TsImportEqualsDecl</code>.\nVisit a node of type <code>TsImportType</code>.\nVisit a node of type <code>TsIndexSignature</code>.\nVisit a node of type <code>TsIndexedAccessType</code>.\nVisit a node of type <code>TsInferType</code>.\nVisit a node of type <code>TsInstantiation</code>.\nVisit a node of type <code>TsInterfaceBody</code>.\nVisit a node of type <code>TsInterfaceDecl</code>.\nVisit a node of type <code>TsIntersectionType</code>.\nVisit a node of type <code>TsKeywordType</code>.\nVisit a node of type <code>TsKeywordTypeKind</code>.\nVisit a node of type <code>TsLit</code>.\nVisit a node of type <code>TsLitType</code>.\nVisit a node of type <code>TsMappedType</code>.\nVisit a node of type <code>TsMethodSignature</code>.\nVisit a node of type <code>TsModuleBlock</code>.\nVisit a node of type <code>TsModuleDecl</code>.\nVisit a node of type <code>TsModuleName</code>.\nVisit a node of type <code>TsModuleRef</code>.\nVisit a node of type <code>TsNamespaceBody</code>.\nVisit a node of type <code>TsNamespaceDecl</code>.\nVisit a node of type <code>TsNamespaceExportDecl</code>.\nVisit a node of type <code>TsNonNullExpr</code>.\nVisit a node of type <code>TsOptionalType</code>.\nVisit a node of type <code>TsParamProp</code>.\nVisit a node of type <code>TsParamPropParam</code>.\nVisit a node of type <code>TsParenthesizedType</code>.\nVisit a node of type <code>TsPropertySignature</code>.\nVisit a node of type <code>TsQualifiedName</code>.\nVisit a node of type <code>TsRestType</code>.\nVisit a node of type <code>TsSatisfiesExpr</code>.\nVisit a node of type <code>TsSetterSignature</code>.\nVisit a node of type <code>TsThisType</code>.\nVisit a node of type <code>TsThisTypeOrIdent</code>.\nVisit a node of type <code>TsTplLitType</code>.\nVisit a node of type <code>TsTupleElement</code>.\nVisit a node of type <code>Vec &lt; TsTupleElement &gt;</code>.\nVisit a node of type <code>TsTupleType</code>.\nVisit a node of type <code>TsType</code>.\nVisit a node of type <code>TsTypeAliasDecl</code>.\nVisit a node of type <code>TsTypeAnn</code>.\nVisit a node of type <code>TsTypeAssertion</code>.\nVisit a node of type <code>TsTypeElement</code>.\nVisit a node of type <code>Vec &lt; TsTypeElement &gt;</code>.\nVisit a node of type <code>TsTypeLit</code>.\nVisit a node of type <code>TsTypeOperator</code>.\nVisit a node of type <code>TsTypeOperatorOp</code>.\nVisit a node of type <code>TsTypeParam</code>.\nVisit a node of type <code>TsTypeParamDecl</code>.\nVisit a node of type <code>TsTypeParamInstantiation</code>.\nVisit a node of type <code>Vec &lt; TsTypeParam &gt;</code>.\nVisit a node of type <code>TsTypePredicate</code>.\nVisit a node of type <code>TsTypeQuery</code>.\nVisit a node of type <code>TsTypeQueryExpr</code>.\nVisit a node of type <code>TsTypeRef</code>.\nVisit a node of type <code>Vec &lt; Box &lt; TsType &gt; &gt;</code>.\nVisit a node of type <code>TsUnionOrIntersectionType</code>.\nVisit a node of type <code>TsUnionType</code>.\nVisit a node of type <code>UnaryExpr</code>.\nVisit a node of type <code>UnaryOp</code>.\nVisit a node of type <code>UpdateExpr</code>.\nVisit a node of type <code>UpdateOp</code>.\nVisit a node of type <code>UsingDecl</code>.\nVisit a node of type <code>VarDecl</code>.\nVisit a node of type <code>VarDeclKind</code>.\nVisit a node of type <code>VarDeclOrExpr</code>.\nVisit a node of type <code>VarDeclarator</code>.\nVisit a node of type <code>Vec &lt; VarDeclarator &gt;</code>.\nVisit a node of type <code>WhileStmt</code>.\nCalls a visitor method (visitor.fold_xxx) with self.\nVisit a node of type <code>WithStmt</code>.\nVisit a node of type <code>YieldExpr</code>.\nThe archived counterpart of <code>BinaryOp::Add</code>\n<code>+</code>\nThe archived counterpart of <code>AssignOp::AddAssign</code>\n<code>+=</code>\nThe archived counterpart of <code>AssignOp::AndAssign</code>\n<code>&amp;&amp;=</code>\nAn archived <code>Accessibility</code>\nAn archived <code>ArrayLit</code>\nAn archived <code>ArrayPat</code>\nAn archived <code>ArrowExpr</code>\nAn archived <code>AssignExpr</code>\nAn archived <code>AssignOp</code>\nAn archived <code>AssignPat</code>\nAn archived <code>AssignPatProp</code>\nAn archived <code>AssignProp</code>\nAn archived <code>AssignTarget</code>\nAn archived <code>AssignTargetPat</code>\nAn archived <code>AutoAccessor</code>\nAn archived <code>AwaitExpr</code>\nAn archived <code>BigInt</code>\nAn archived <code>BinExpr</code>\nAn archived <code>BinaryOp</code>\nAn archived <code>BindingIdent</code>\nAn archived <code>BlockStmt</code>\nAn archived <code>BlockStmtOrExpr</code>\nAn archived <code>Bool</code>\nAn archived <code>BreakStmt</code>\nAn archived <code>CallExpr</code>\nAn archived <code>Callee</code>\nAn archived <code>CatchClause</code>\nAn archived <code>Class</code>\nAn archived <code>ClassDecl</code>\nAn archived <code>ClassExpr</code>\nAn archived <code>ClassMember</code>\nAn archived <code>ClassMethod</code>\nAn archived <code>ClassProp</code>\nAn archived <code>ComputedPropName</code>\nAn archived <code>CondExpr</code>\nAn archived <code>Constructor</code>\nAn archived <code>ContinueStmt</code>\nAn archived <code>DebuggerStmt</code>\nAn archived <code>Decl</code>\nAn archived <code>Decorator</code>\nAn archived <code>DefaultDecl</code>\nAn archived <code>DoWhileStmt</code>\nAn archived <code>EmptyStmt</code>\nAn archived <code>ExportAll</code>\nAn archived <code>ExportDecl</code>\nAn archived <code>ExportDefaultDecl</code>\nAn archived <code>ExportDefaultExpr</code>\nAn archived <code>ExportDefaultSpecifier</code>\nAn archived <code>ExportNamedSpecifier</code>\nAn archived <code>ExportNamespaceSpecifier</code>\nAn archived <code>ExportSpecifier</code>\nAn archived <code>Expr</code>\nAn archived <code>ExprOrSpread</code>\nAn archived <code>ExprStmt</code>\nAn archived <code>FnDecl</code>\nAn archived <code>FnExpr</code>\nAn archived <code>ForHead</code>\nAn archived <code>ForInStmt</code>\nAn archived <code>ForOfStmt</code>\nAn archived <code>ForStmt</code>\nAn archived <code>Function</code>\nAn archived <code>GetterProp</code>\nAn archived <code>Ident</code>\nAn archived <code>IdentName</code>\nAn archived <code>IfStmt</code>\nAn archived <code>Import</code>\nAn archived <code>ImportDecl</code>\nAn archived <code>ImportDefaultSpecifier</code>\nAn archived <code>ImportNamedSpecifier</code>\nAn archived <code>ImportSpecifier</code>\nAn archived <code>ImportStarAsSpecifier</code>\nAn archived <code>Invalid</code>\nAn archived <code>JSXAttr</code>\nAn archived <code>JSXAttrName</code>\nAn archived <code>JSXAttrOrSpread</code>\nAn archived <code>JSXAttrValue</code>\nAn archived <code>JSXClosingElement</code>\nAn archived <code>JSXClosingFragment</code>\nAn archived <code>JSXElement</code>\nAn archived <code>JSXElementChild</code>\nAn archived <code>JSXElementName</code>\nAn archived <code>JSXEmptyExpr</code>\nAn archived <code>JSXExpr</code>\nAn archived <code>JSXExprContainer</code>\nAn archived <code>JSXFragment</code>\nAn archived <code>JSXMemberExpr</code>\nAn archived <code>JSXNamespacedName</code>\nAn archived <code>JSXObject</code>\nAn archived <code>JSXOpeningElement</code>\nAn archived <code>JSXOpeningFragment</code>\nAn archived <code>JSXSpreadChild</code>\nAn archived <code>JSXText</code>\nAn archived <code>Key</code>\nAn archived <code>KeyValuePatProp</code>\nAn archived <code>KeyValueProp</code>\nAn archived <code>LabeledStmt</code>\nAn archived <code>Lit</code>\nAn archived <code>MemberExpr</code>\nAn archived <code>MemberProp</code>\nAn archived <code>MetaPropExpr</code>\nAn archived <code>MetaPropKind</code>\nAn archived <code>MethodKind</code>\nAn archived <code>MethodProp</code>\nAn archived <code>Module</code>\nAn archived <code>ModuleDecl</code>\nAn archived <code>ModuleExportName</code>\nAn archived <code>ModuleItem</code>\nAn archived <code>NamedExport</code>\nAn archived <code>NewExpr</code>\nAn archived <code>Null</code>\nAn archived <code>Number</code>\nAn archived <code>ObjectLit</code>\nAn archived <code>ObjectPat</code>\nAn archived <code>ObjectPatProp</code>\nAn archived <code>OptCall</code>\nAn archived <code>OptChainBase</code>\nAn archived <code>OptChainExpr</code>\nAn archived <code>Param</code>\nAn archived <code>ParamOrTsParamProp</code>\nAn archived <code>ParenExpr</code>\nAn archived <code>Pat</code>\nAn archived <code>PrivateMethod</code>\nAn archived <code>PrivateName</code>\nAn archived <code>PrivateProp</code>\nAn archived <code>Program</code>\nAn archived <code>Prop</code>\nAn archived <code>PropName</code>\nAn archived <code>PropOrSpread</code>\nAn archived <code>Regex</code>\nAn archived <code>RestPat</code>\nAn archived <code>ReturnStmt</code>\nAn archived <code>Script</code>\nAn archived <code>SeqExpr</code>\nAn archived <code>SetterProp</code>\nAn archived <code>SimpleAssignTarget</code>\nAn archived <code>SpreadElement</code>\nAn archived <code>StaticBlock</code>\nAn archived <code>Stmt</code>\nAn archived <code>Str</code>\nAn archived <code>Super</code>\nAn archived <code>SuperProp</code>\nAn archived <code>SuperPropExpr</code>\nAn archived <code>SwitchCase</code>\nAn archived <code>SwitchStmt</code>\nAn archived <code>TaggedTpl</code>\nAn archived <code>ThisExpr</code>\nAn archived <code>ThrowStmt</code>\nAn archived <code>Tpl</code>\nAn archived <code>TplElement</code>\nAn archived <code>TruePlusMinus</code>\nAn archived <code>TryStmt</code>\nAn archived <code>TsArrayType</code>\nAn archived <code>TsAsExpr</code>\nAn archived <code>TsCallSignatureDecl</code>\nAn archived <code>TsConditionalType</code>\nAn archived <code>TsConstAssertion</code>\nAn archived <code>TsConstructSignatureDecl</code>\nAn archived <code>TsConstructorType</code>\nAn archived <code>TsEntityName</code>\nAn archived <code>TsEnumDecl</code>\nAn archived <code>TsEnumMember</code>\nAn archived <code>TsEnumMemberId</code>\nAn archived <code>TsExportAssignment</code>\nAn archived <code>TsExprWithTypeArgs</code>\nAn archived <code>TsExternalModuleRef</code>\nAn archived <code>TsFnOrConstructorType</code>\nAn archived <code>TsFnParam</code>\nAn archived <code>TsFnType</code>\nAn archived <code>TsGetterSignature</code>\nAn archived <code>TsImportEqualsDecl</code>\nAn archived <code>TsImportType</code>\nAn archived <code>TsIndexSignature</code>\nAn archived <code>TsIndexedAccessType</code>\nAn archived <code>TsInferType</code>\nAn archived <code>TsInstantiation</code>\nAn archived <code>TsInterfaceBody</code>\nAn archived <code>TsInterfaceDecl</code>\nAn archived <code>TsIntersectionType</code>\nAn archived <code>TsKeywordType</code>\nAn archived <code>TsKeywordTypeKind</code>\nAn archived <code>TsLit</code>\nAn archived <code>TsLitType</code>\nAn archived <code>TsMappedType</code>\nAn archived <code>TsMethodSignature</code>\nAn archived <code>TsModuleBlock</code>\nAn archived <code>TsModuleDecl</code>\nAn archived <code>TsModuleName</code>\nAn archived <code>TsModuleRef</code>\nAn archived <code>TsNamespaceBody</code>\nAn archived <code>TsNamespaceDecl</code>\nAn archived <code>TsNamespaceExportDecl</code>\nAn archived <code>TsNonNullExpr</code>\nAn archived <code>TsOptionalType</code>\nAn archived <code>TsParamProp</code>\nAn archived <code>TsParamPropParam</code>\nAn archived <code>TsParenthesizedType</code>\nAn archived <code>TsPropertySignature</code>\nAn archived <code>TsQualifiedName</code>\nAn archived <code>TsRestType</code>\nAn archived <code>TsSatisfiesExpr</code>\nAn archived <code>TsSetterSignature</code>\nAn archived <code>TsThisType</code>\nAn archived <code>TsThisTypeOrIdent</code>\nAn archived <code>TsTplLitType</code>\nAn archived <code>TsTupleElement</code>\nAn archived <code>TsTupleType</code>\nAn archived <code>TsType</code>\nAn archived <code>TsTypeAliasDecl</code>\nAn archived <code>TsTypeAnn</code>\nAn archived <code>TsTypeAssertion</code>\nAn archived <code>TsTypeElement</code>\nAn archived <code>TsTypeLit</code>\nAn archived <code>TsTypeOperator</code>\nAn archived <code>TsTypeOperatorOp</code>\nAn archived <code>TsTypeParam</code>\nAn archived <code>TsTypeParamDecl</code>\nAn archived <code>TsTypeParamInstantiation</code>\nAn archived <code>TsTypePredicate</code>\nAn archived <code>TsTypeQuery</code>\nAn archived <code>TsTypeQueryExpr</code>\nAn archived <code>TsTypeRef</code>\nAn archived <code>TsUnionOrIntersectionType</code>\nAn archived <code>TsUnionType</code>\nAn archived <code>UnaryExpr</code>\nAn archived <code>UnaryOp</code>\nAn archived <code>UpdateExpr</code>\nAn archived <code>UpdateOp</code>\nAn archived <code>UsingDecl</code>\nAn archived <code>VarDecl</code>\nAn archived <code>VarDeclKind</code>\nAn archived <code>VarDeclOrExpr</code>\nAn archived <code>VarDeclarator</code>\nAn archived <code>WhileStmt</code>\nAn archived <code>WithStmt</code>\nAn archived <code>YieldExpr</code>\nThe resolver for <code>Expr::Array</code>\nThe archived counterpart of <code>Expr::Array</code>\nThe resolver for <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>AssignTargetPat::Array</code>\nThe archived counterpart of <code>Pat::Array</code>\nThe archived counterpart of <code>TsFnParam::Array</code>\nArray literal.\nThe resolver for an archived <code>ArrayLit</code>\nThe resolver for <code>Expr::Arrow</code>\nThe archived counterpart of <code>Expr::Arrow</code>\nThe resolver for an archived <code>ArrowExpr</code>\nThe resolver for <code>Expr::Assign</code>\nThe archived counterpart of <code>Expr::Assign</code>\nThe archived counterpart of <code>AssignOp::Assign</code>\n<code>=</code>\nThe archived counterpart of <code>Pat::Assign</code>\nThe archived counterpart of <code>ObjectPatProp::Assign</code>\nThe archived counterpart of <code>Prop::Assign</code>\nThis is <strong>invalid</strong> for object literal.\nThe archived counterpart of <code>TsParamPropParam::Assign</code>\nThe resolver for an archived <code>AssignExpr</code>\n<code>{key}</code> or <code>{key = value}</code>\nThe resolver for an archived <code>AssignTargetPat</code>\nThe resolver for an archived <code>AssignTarget</code>\nThe archived counterpart of <code>ClassMember::AutoAccessor</code>\nStage 3\nThe resolver for <code>Expr::Await</code>\nThe archived counterpart of <code>Expr::Await</code>\nThe resolver for an archived <code>AwaitExpr</code>\nThe archived counterpart of <code>UnaryOp::Bang</code>\n<code>!</code>\nThe archived counterpart of <code>Lit::BigInt</code>\nThe archived counterpart of <code>PropName::BigInt</code>\nThe archived counterpart of <code>TsLit::BigInt</code>\nA big signed integer type.\nThe resolver for <code>Expr::Bin</code>\nThe archived counterpart of <code>Expr::Bin</code>\nThe resolver for an archived <code>BinExpr</code>\nIdentifier used as a pattern.\nThe archived counterpart of <code>BinaryOp::BitAnd</code>\n<code>&amp;</code>\nThe archived counterpart of <code>AssignOp::BitAndAssign</code>\n<code>&amp;=</code>\nThe archived counterpart of <code>BinaryOp::BitOr</code>\n<code>|</code>\nThe archived counterpart of <code>AssignOp::BitOrAssign</code>\n<code>|=</code>\nThe archived counterpart of <code>BinaryOp::BitXor</code>\n<code>^</code>\nThe archived counterpart of <code>AssignOp::BitXorAssign</code>\n<code>^=</code>\nThe archived counterpart of <code>Stmt::Block</code>\nUse when only block statements are allowed.\nThe resolver for <code>BlockStmtOrExpr::BlockStmt</code>\nThe archived counterpart of <code>BlockStmtOrExpr::BlockStmt</code>\nThe resolver for an archived <code>BlockStmtOrExpr</code>\nA boolean literal.\nThe archived counterpart of <code>Lit::Bool</code>\nThe archived counterpart of <code>TsLit::Bool</code>\nThe archived counterpart of <code>Stmt::Break</code>\nThe resolver for <code>Expr::Call</code>\nThe archived counterpart of <code>Expr::Call</code>\nThe resolver for <code>OptChainBase::Call</code>\nThe archived counterpart of <code>OptChainBase::Call</code>\nThe resolver for an archived <code>CallExpr</code>\nThe resolver for an archived <code>Callee</code>\nThe archived counterpart of <code>Decl::Class</code>\nThe resolver for <code>Expr::Class</code>\nThe archived counterpart of <code>Expr::Class</code>\nThe archived counterpart of <code>DefaultDecl::Class</code>\nClass expression.\nThe resolver for an archived <code>ClassExpr</code>\nThe archived counterpart of <code>ClassMember::ClassProp</code>\nstage 0 / Typescript\nThe resolver for <code>MemberProp::Computed</code>\nThe archived counterpart of <code>MemberProp::Computed</code>\nThe resolver for <code>SuperProp::Computed</code>\nThe archived counterpart of <code>SuperProp::Computed</code>\nThe archived counterpart of <code>PropName::Computed</code>\nThe resolver for <code>Expr::Cond</code>\nThe archived counterpart of <code>Expr::Cond</code>\ntrue ? ‘a’ : ‘b’\nThe resolver for an archived <code>CondExpr</code>\nThe archived counterpart of <code>VarDeclKind::Const</code>\n<code>const</code>\nThe archived counterpart of <code>ClassMember::Constructor</code>\nThe archived counterpart of <code>Stmt::Continue</code>\nThe archived counterpart of <code>Stmt::Debugger</code>\nThe archived counterpart of <code>Stmt::Decl</code>\nThe archived counterpart of <code>ImportSpecifier::Default</code>\nThe archived counterpart of <code>ExportSpecifier::Default</code>\nThe archived counterpart of <code>UnaryOp::Delete</code>\n<code>delete</code>\nThe archived counterpart of <code>BinaryOp::Div</code>\n<code>/</code>\nThe archived counterpart of <code>AssignOp::DivAssign</code>\n<code>/=</code>\nThe archived counterpart of <code>Stmt::DoWhile</code>\nThe archived counterpart of <code>ClassMember::Empty</code>\nThe archived counterpart of <code>Stmt::Empty</code>\nThe archived counterpart of <code>BinaryOp::EqEq</code>\n<code>==</code>\nThe archived counterpart of <code>BinaryOp::EqEqEq</code>\n<code>===</code>\nNote: This type implements <code>Serailize</code> and <code>Deserialize</code> if …\nThe archived counterpart of <code>BinaryOp::Exp</code>\n<code>**</code>\nThe archived counterpart of <code>AssignOp::ExpAssign</code>\n<code>**=</code>\n<code>export * from &#39;mod&#39;</code>\nThe archived counterpart of <code>ModuleDecl::ExportAll</code>\nThe archived counterpart of <code>ModuleDecl::ExportDecl</code>\nThe archived counterpart of <code>ModuleDecl::ExportDefaultDecl</code>\nDefault exports other than <strong>direct</strong> function expression or …\nThe archived counterpart of <code>ModuleDecl::ExportDefaultExpr</code>\nThe archived counterpart of <code>ModuleDecl::ExportNamed</code>\n<code>export * as foo from &#39;src&#39;;</code>\nThe resolver for <code>Callee::Expr</code>\nThe archived counterpart of <code>Callee::Expr</code>\nThe resolver for <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>BlockStmtOrExpr::Expr</code>\nThe archived counterpart of <code>JSXExpr::Expr</code>\nThe archived counterpart of <code>Pat::Expr</code>\nOnly for for-in / for-of loops. This is <em>syntactically</em> …\nThe archived counterpart of <code>Stmt::Expr</code>\nThe archived counterpart of <code>VarDeclOrExpr::Expr</code>\nThe resolver for an archived <code>ExprOrSpread</code>\nThe resolver for an archived <code>Expr</code>\nThe archived counterpart of <code>Decl::Fn</code>\nThe resolver for <code>Expr::Fn</code>\nThe archived counterpart of <code>Expr::Fn</code>\nThe archived counterpart of <code>DefaultDecl::Fn</code>\nFunction expression.\nThe resolver for an archived <code>FnExpr</code>\nThe archived counterpart of <code>Stmt::For</code>\nA head for for-in and for-of loop.\nThe archived counterpart of <code>Stmt::ForIn</code>\nThe archived counterpart of <code>Stmt::ForOf</code>\nCommon parts of function and method.\nThe archived counterpart of <code>MethodKind::Getter</code>\nThe archived counterpart of <code>Prop::Getter</code>\nThe archived counterpart of <code>BinaryOp::Gt</code>\n<code>&gt;</code>\nThe archived counterpart of <code>BinaryOp::GtEq</code>\n<code>&gt;=</code>\nSee Ident for documentation.\nA complete identifier with span.\nThe resolver for <code>Expr::Ident</code>\nThe archived counterpart of <code>Expr::Ident</code>\nThe resolver for <code>MemberProp::Ident</code>\nThe archived counterpart of <code>MemberProp::Ident</code>\nThe resolver for <code>SuperProp::Ident</code>\nThe archived counterpart of <code>SuperProp::Ident</code>\nThe resolver for <code>SimpleAssignTarget::Ident</code>\nThe archived counterpart of <code>SimpleAssignTarget::Ident</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>JSXObject::Ident</code>\nThe archived counterpart of <code>JSXElementName::Ident</code>\nThe archived counterpart of <code>JSXAttrName::Ident</code>\nThe archived counterpart of <code>ModuleExportName::Ident</code>\nThe archived counterpart of <code>Pat::Ident</code>\nThe archived counterpart of <code>PropName::Ident</code>\nThe archived counterpart of <code>TsParamPropParam::Ident</code>\nThe archived counterpart of <code>TsEntityName::Ident</code>\nThe archived counterpart of <code>TsFnParam::Ident</code>\nThe archived counterpart of <code>TsThisTypeOrIdent::Ident</code>\nThe archived counterpart of <code>TsEnumMemberId::Ident</code>\nThe archived counterpart of <code>TsModuleName::Ident</code>\nThe archived counterpart of <code>Stmt::If</code>\nThe resolver for <code>Callee::Import</code>\nThe archived counterpart of <code>Callee::Import</code>\nThe archived counterpart of <code>ModuleDecl::Import</code>\nThe archived counterpart of <code>TsTypeQueryExpr::Import</code>\ne.g. <code>import foo from &#39;mod.js&#39;</code>\nThe resolver for <code>MetaPropKind::ImportMeta</code>\nThe archived counterpart of <code>MetaPropKind::ImportMeta</code>\n<code>import.meta</code>\ne.g. local = foo, imported = None …\nThe resolver for an archived <code>Import</code>\ne.g. <code>import * as foo from &#39;mod.js&#39;</code>.\nAccording to the current spec <code>with</code> of crate::ImportDecl …\nThe archived counterpart of <code>BinaryOp::In</code>\n<code>in</code>\nThe archived counterpart of <code>BinaryOp::InstanceOf</code>\n<code>instanceof</code>\nRepresents a invalid node.\nThe resolver for <code>Expr::Invalid</code>\nThe archived counterpart of <code>Expr::Invalid</code>\nThe resolver for <code>AssignTargetPat::Invalid</code>\nThe archived counterpart of <code>AssignTargetPat::Invalid</code>\nThe resolver for <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>SimpleAssignTarget::Invalid</code>\nThe archived counterpart of <code>Pat::Invalid</code>\nThe resolver for an archived <code>Invalid</code>\nThe archived counterpart of <code>JSXAttrOrSpread::JSXAttr</code>\nThe resolver for <code>Expr::JSXElement</code>\nThe archived counterpart of <code>Expr::JSXElement</code>\nThe archived counterpart of <code>JSXAttrValue::JSXElement</code>\nThe archived counterpart of <code>JSXElementChild::JSXElement</code>\nThe resolver for <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>Expr::JSXEmpty</code>\nThe archived counterpart of <code>JSXExpr::JSXEmptyExpr</code>\nThe archived counterpart of <code>JSXAttrValue::JSXExprContainer</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>Expr::JSXFragment</code>\nThe archived counterpart of <code>JSXAttrValue::JSXFragment</code>\nThe archived counterpart of <code>JSXElementChild::JSXFragment</code>\nThe resolver for <code>Expr::JSXMember</code>\nThe archived counterpart of <code>Expr::JSXMember</code>\nThe archived counterpart of <code>JSXObject::JSXMemberExpr</code>\nThe archived counterpart of <code>JSXElementName::JSXMemberExpr</code>\nXML-based namespace syntax:\nThe resolver for <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of <code>Expr::JSXNamespacedName</code>\nThe archived counterpart of …\nThe archived counterpart of <code>JSXAttrName::JSXNamespacedName</code>\nUsed for <code>obj</code> property of <code>JSXMemberExpr</code>.\nThe archived counterpart of <code>JSXElementChild::JSXSpreadChild</code>\nThe archived counterpart of <code>JSXElementChild::JSXText</code>\nThe archived counterpart of <code>Lit::JSXText</code>\nEither a private name or a public name.\nThe archived counterpart of <code>TsTypeOperatorOp::KeyOf</code>\n<code>keyof</code>\nThe archived counterpart of <code>ObjectPatProp::KeyValue</code>\nThe archived counterpart of <code>Prop::KeyValue</code>\n<code>key: value</code> in <code>{ key: value, }</code>\n<code>{key: value}</code>\nThe archived counterpart of <code>BinaryOp::LShift</code>\n<code>&lt;&lt;</code>\nThe archived counterpart of <code>AssignOp::LShiftAssign</code>\n<code>&lt;&lt;=</code>\nThe archived counterpart of <code>Stmt::Labeled</code>\nThe archived counterpart of <code>VarDeclKind::Let</code>\n<code>let</code>\nRepresents the formatting rule for a list of nodes.\nThe resolver for <code>Expr::Lit</code>\nThe archived counterpart of <code>Expr::Lit</code>\nThe archived counterpart of <code>JSXAttrValue::Lit</code>\nThe archived counterpart of <code>BinaryOp::LogicalAnd</code>\n<code>&amp;&amp;</code>\nThe archived counterpart of <code>BinaryOp::LogicalOr</code>\n<code>||</code>\nThe archived counterpart of <code>BinaryOp::Lt</code>\n<code>&lt;</code>\nThe archived counterpart of <code>BinaryOp::LtEq</code>\n<code>&lt;=</code>\nThe resolver for <code>Expr::Member</code>\nThe archived counterpart of <code>Expr::Member</code>\nA member expression. If computed is true, the node …\nThe resolver for <code>SimpleAssignTarget::Member</code>\nThe archived counterpart of <code>SimpleAssignTarget::Member</code>\nThe resolver for <code>OptChainBase::Member</code>\nThe archived counterpart of <code>OptChainBase::Member</code>\nThe resolver for an archived <code>MemberExpr</code>\nThe resolver for an archived <code>MemberProp</code>\nThe resolver for <code>Expr::MetaProp</code>\nThe archived counterpart of <code>Expr::MetaProp</code>\nThe resolver for an archived <code>MetaPropExpr</code>\nThe resolver for an archived <code>MetaPropKind</code>\nThe archived counterpart of <code>ClassMember::Method</code>\n<code>es2015</code>\nThe archived counterpart of <code>MethodKind::Method</code>\nThe archived counterpart of <code>Prop::Method</code>\nThe archived counterpart of <code>UnaryOp::Minus</code>\n<code>-</code>\nThe archived counterpart of <code>TruePlusMinus::Minus</code>\nThe archived counterpart of <code>UpdateOp::MinusMinus</code>\n<code>--</code>\nThe archived counterpart of <code>BinaryOp::Mod</code>\n<code>%</code>\nThe archived counterpart of <code>AssignOp::ModAssign</code>\n<code>%=</code>\nThe archived counterpart of <code>Program::Module</code>\nThe archived counterpart of <code>ModuleItem::ModuleDecl</code>\nThe archived counterpart of <code>BinaryOp::Mul</code>\n<code>*</code>\nThe archived counterpart of <code>AssignOp::MulAssign</code>\n<code>*=</code>\nThe archived counterpart of <code>ImportSpecifier::Named</code>\nThe archived counterpart of <code>ExportSpecifier::Named</code>\n<code>export { foo } from &#39;mod&#39;</code> <code>export { foo as bar } from &#39;mod&#39;</code>\nThe archived counterpart of <code>ImportSpecifier::Namespace</code>\nThe archived counterpart of <code>ExportSpecifier::Namespace</code>\nThe resolver for <code>Expr::New</code>\nThe archived counterpart of <code>Expr::New</code>\n<code>new Cat()</code>\nThe resolver for an archived <code>NewExpr</code>\nThe resolver for <code>MetaPropKind::NewTarget</code>\nThe archived counterpart of <code>MetaPropKind::NewTarget</code>\n<code>new.target</code>\nThe archived counterpart of <code>BinaryOp::NotEq</code>\n<code>!=</code>\nThe archived counterpart of <code>BinaryOp::NotEqEq</code>\n<code>!==</code>\nThe archived counterpart of <code>Lit::Null</code>\nThe archived counterpart of <code>AssignOp::NullishAssign</code>\n<code>??=</code>\nThe archived counterpart of <code>BinaryOp::NullishCoalescing</code>\n<code>??</code>\nThe archived counterpart of <code>Lit::Num</code>\nThe archived counterpart of <code>PropName::Num</code>\nNumeric literal.\nA numeric literal.\nThe archived counterpart of <code>TsLit::Number</code>\nThe resolver for <code>Expr::Object</code>\nThe archived counterpart of <code>Expr::Object</code>\nThe resolver for <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>AssignTargetPat::Object</code>\nThe archived counterpart of <code>Pat::Object</code>\nThe archived counterpart of <code>TsFnParam::Object</code>\nObject literal.\nThe resolver for an archived <code>ObjectLit</code>\nThe resolver for an archived <code>OptCall</code>\nThe resolver for <code>Expr::OptChain</code>\nThe archived counterpart of <code>Expr::OptChain</code>\nThe resolver for <code>SimpleAssignTarget::OptChain</code>\nThe archived counterpart of <code>SimpleAssignTarget::OptChain</code>\nThe resolver for an archived <code>OptChainBase</code>\nThe resolver for an archived <code>OptChainExpr</code>\nThe archived counterpart of <code>AssignOp::OrAssign</code>\n<code>||=</code>\nThe archived counterpart of <code>ParamOrTsParamProp::Param</code>\nThe resolver for <code>Expr::Paren</code>\nThe archived counterpart of <code>Expr::Paren</code>\nThe resolver for <code>SimpleAssignTarget::Paren</code>\nThe archived counterpart of <code>SimpleAssignTarget::Paren</code>\nThe resolver for an archived <code>ParenExpr</code>\nThe resolver for <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>AssignTarget::Pat</code>\nThe archived counterpart of <code>ForHead::Pat</code>\nThe archived counterpart of <code>UnaryOp::Plus</code>\n<code>+</code>\nThe archived counterpart of <code>TruePlusMinus::Plus</code>\nThe archived counterpart of <code>UpdateOp::PlusPlus</code>\n<code>++</code>\nThe archived counterpart of <code>Key::Private</code>\nThe archived counterpart of <code>Accessibility::Private</code>\nThe archived counterpart of <code>ClassMember::PrivateMethod</code>\nThe resolver for <code>Expr::PrivateName</code>\nThe archived counterpart of <code>Expr::PrivateName</code>\nThe resolver for <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>MemberProp::PrivateName</code>\nThe archived counterpart of <code>ClassMember::PrivateProp</code>\nThe resolver for <code>PropOrSpread::Prop</code>\nThe archived counterpart of <code>PropOrSpread::Prop</code>\nThe resolver for an archived <code>PropOrSpread</code>\nThe archived counterpart of <code>Accessibility::Protected</code>\nThe archived counterpart of <code>Key::Public</code>\nThe archived counterpart of <code>Accessibility::Public</code>\nThe archived counterpart of <code>BinaryOp::RShift</code>\n<code>&gt;&gt;</code>\nThe archived counterpart of <code>AssignOp::RShiftAssign</code>\n<code>&gt;&gt;=</code>\nThe archived counterpart of <code>TsTypeOperatorOp::ReadOnly</code>\n<code>readonly</code>\nThe archived counterpart of <code>Lit::Regex</code>\nThe archived counterpart of <code>Pat::Rest</code>\nThe archived counterpart of <code>ObjectPatProp::Rest</code>\nThe archived counterpart of <code>TsFnParam::Rest</code>\nEsTree <code>RestElement</code>\nThe archived counterpart of <code>Stmt::Return</code>\nThe archived counterpart of <code>Program::Script</code>\nThe resolver for <code>Expr::Seq</code>\nThe archived counterpart of <code>Expr::Seq</code>\nThe resolver for an archived <code>SeqExpr</code>\nThe archived counterpart of <code>MethodKind::Setter</code>\nThe archived counterpart of <code>Prop::Setter</code>\nThe archived counterpart of <code>Prop::Shorthand</code>\n<code>a</code> in <code>{ a, }</code>\nThe resolver for <code>AssignTarget::Simple</code>\nThe archived counterpart of <code>AssignTarget::Simple</code>\nThe resolver for an archived <code>SimpleAssignTarget</code>\nThe resolver for <code>PropOrSpread::Spread</code>\nThe archived counterpart of <code>PropOrSpread::Spread</code>\nSpread properties, e.g., <code>{a: 1, ...obj, b: 2}</code>.\nThe archived counterpart of <code>JSXAttrOrSpread::SpreadElement</code>\nThe resolver for an archived <code>SpreadElement</code>\nThe archived counterpart of <code>ClassMember::StaticBlock</code>\nStage 3\nThe archived counterpart of <code>ModuleItem::Stmt</code>\nA string literal.\nThe archived counterpart of <code>Lit::Str</code>\nThe archived counterpart of <code>ModuleExportName::Str</code>\nThe archived counterpart of <code>PropName::Str</code>\nString literal.\nThe archived counterpart of <code>TsLit::Str</code>\nThe archived counterpart of <code>TsEnumMemberId::Str</code>\nThe archived counterpart of <code>TsModuleName::Str</code>\nThe archived counterpart of <code>BinaryOp::Sub</code>\n<code>-</code>\nThe archived counterpart of <code>AssignOp::SubAssign</code>\n<code>-=</code>\nThe resolver for <code>Callee::Super</code>\nThe archived counterpart of <code>Callee::Super</code>\nThe resolver for <code>Expr::SuperProp</code>\nThe archived counterpart of <code>Expr::SuperProp</code>\nThe resolver for <code>SimpleAssignTarget::SuperProp</code>\nThe archived counterpart of <code>SimpleAssignTarget::SuperProp</code>\nThe resolver for an archived <code>SuperPropExpr</code>\nThe resolver for an archived <code>SuperProp</code>\nThe resolver for an archived <code>Super</code>\nThe archived counterpart of <code>Stmt::Switch</code>\nThe resolver for <code>Expr::TaggedTpl</code>\nThe archived counterpart of <code>Expr::TaggedTpl</code>\nThe resolver for an archived <code>TaggedTpl</code>\nThe resolver for <code>Expr::This</code>\nThe archived counterpart of <code>Expr::This</code>\nThe resolver for an archived <code>ThisExpr</code>\nThe archived counterpart of <code>Stmt::Throw</code>\nThe archived counterpart of <code>UnaryOp::Tilde</code>\n<code>~</code>\nThe resolver for <code>Expr::Tpl</code>\nThe archived counterpart of <code>Expr::Tpl</code>\nThe archived counterpart of <code>TsLit::Tpl</code>\nThe resolver for an archived <code>TplElement</code>\nThe resolver for an archived <code>Tpl</code>\nThe archived counterpart of <code>TruePlusMinus::True</code>\nThe archived counterpart of <code>Stmt::Try</code>\nA try statement. If handler is null then finalizer must be …\nThe archived counterpart of <code>TsKeywordTypeKind::TsAnyKeyword</code>\nThe archived counterpart of <code>TsType::TsArrayType</code>\nThe resolver for <code>Expr::TsAs</code>\nThe archived counterpart of <code>Expr::TsAs</code>\nThe resolver for <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsAs</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsConditionalType</code>\nThe resolver for <code>Expr::TsConstAssertion</code>\nThe archived counterpart of <code>Expr::TsConstAssertion</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsTypeQueryExpr::TsEntityName</code>\nThe archived counterpart of <code>TsModuleRef::TsEntityName</code>\nThe archived counterpart of <code>Decl::TsEnum</code>\nInvalid: Ident with empty symbol.\nTypeScript’s own parser uses ExportAssignment for both …\nThe archived counterpart of <code>ModuleDecl::TsExportAssignment</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsFnOrConstructorType</code>\nThe archived counterpart of <code>TsFnOrConstructorType::TsFnType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsImportEquals</code>\nThe archived counterpart of <code>TsType::TsImportType</code>\nThe archived counterpart of <code>ClassMember::TsIndexSignature</code>\nThe archived counterpart of <code>TsTypeElement::TsIndexSignature</code>\nThe archived counterpart of <code>TsType::TsIndexedAccessType</code>\nThe archived counterpart of <code>TsType::TsInferType</code>\nThe resolver for <code>Expr::TsInstantiation</code>\nThe archived counterpart of <code>Expr::TsInstantiation</code>\nThe resolver for <code>SimpleAssignTarget::TsInstantiation</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsInterface</code>\nThe archived counterpart of <code>DefaultDecl::TsInterfaceDecl</code>\nThe archived counterpart of …\nThe archived counterpart of …\nThe archived counterpart of <code>TsType::TsKeywordType</code>\nThe archived counterpart of <code>TsType::TsLitType</code>\nThe archived counterpart of <code>TsType::TsMappedType</code>\nThe archived counterpart of …\nThe archived counterpart of <code>Decl::TsModule</code>\nThe archived counterpart of <code>TsNamespaceBody::TsModuleBlock</code>\n<code>namespace A.B { }</code> is a namespace named <code>A</code> with another …\nThe archived counterpart of …\nThe archived counterpart of <code>ModuleDecl::TsNamespaceExport</code>\nThe archived counterpart of …\nThe resolver for <code>Expr::TsNonNull</code>\nThe archived counterpart of <code>Expr::TsNonNull</code>\nThe resolver for <code>SimpleAssignTarget::TsNonNull</code>\nThe archived counterpart of <code>SimpleAssignTarget::TsNonNull</code>")