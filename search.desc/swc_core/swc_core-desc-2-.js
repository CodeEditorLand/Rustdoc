searchState.loadedDescShard("swc_core", 2, "Returns <code>Some</code> if <code>self</code> is a reference of variant <code>TsParamProp</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsRestType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsSatisfies</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsThisType</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTupleType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeAlias</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeLit</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeQuery</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsTypeRef</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>TsUnionType</code>…\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Unary</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Update</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Using</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>UsingDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Var</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>VarDecl</code>, …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>While</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>With</code>, and …\nReturns <code>Some</code> if <code>self</code> is a reference of variant <code>Yield</code>, and …\nThe archived counterpart of <code>TsTypePredicate::asserts</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Assign</code>, and <code>None</code> …\nReinitializes a <code>BigInt</code>.\nGet the atom of the export name.\nThe archived counterpart of <code>JSXOpeningElement::attrs</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>AutoAccessor</code>, and <code>None</code> …\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Await</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::base</code>\nThis is boxed to reduce the type size of Expr.\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>BigInt</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bin</code>, and <code>None</code> otherwise.\nReturns whether the bit in position <code>bit</code> is set, using the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Block</code>, and <code>None</code> …\nThe archived counterpart of <code>TryStmt::block</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>BlockStmt</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::body</code>\nThe archived counterpart of <code>Constructor::body</code>\nThe archived counterpart of <code>StaticBlock::body</code>\nThe archived counterpart of <code>ArrowExpr::body</code>\nThis is boxed to reduce the type size of Expr.\nThe archived counterpart of <code>Function::body</code>\nThe archived counterpart of <code>Module::body</code>\nThe archived counterpart of <code>Script::body</code>\nThe archived counterpart of <code>GetterProp::body</code>\nThe archived counterpart of <code>SetterProp::body</code>\nThe archived counterpart of <code>WithStmt::body</code>\nThe archived counterpart of <code>LabeledStmt::body</code>\nThe archived counterpart of <code>WhileStmt::body</code>\nThe archived counterpart of <code>DoWhileStmt::body</code>\nThe archived counterpart of <code>ForStmt::body</code>\nThe archived counterpart of <code>ForInStmt::body</code>\nThe archived counterpart of <code>ForOfStmt::body</code>\nThe archived counterpart of <code>CatchClause::body</code>\nThe archived counterpart of <code>TsInterfaceDecl::body</code>\nThe archived counterpart of <code>TsInterfaceBody::body</code>\nThe archived counterpart of <code>TsModuleDecl::body</code>\nThe archived counterpart of <code>TsModuleBlock::body</code>\nThe archived counterpart of <code>TsNamespaceDecl::body</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Bool</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Break</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Call</code>, and <code>None</code> …\nThe archived counterpart of <code>CallExpr::callee</code>\nThe archived counterpart of <code>NewExpr::callee</code>\nThe archived counterpart of <code>OptCall::callee</code>\nReturns true if the statement does not prevent the …\nThe archived counterpart of <code>SwitchStmt::cases</code>\nReturns the truncated principal cube root of <code>self</code> – see …\nThe archived counterpart of <code>TsConditionalType::check_type</code>\nThe archived counterpart of <code>JSXElement::children</code>\nThe archived counterpart of <code>JSXFragment::children</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Class</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassDecl::class</code>\nThe archived counterpart of <code>ClassExpr::class</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>ClassProp</code>, and <code>None</code> …\nThe archived counterpart of <code>JSXElement::closing</code>\nThe archived counterpart of <code>JSXFragment::closing</code>\nGets a custom text range to use when emitting comments.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Computed</code>, and <code>None</code> …\nThe archived counterpart of <code>TsPropertySignature::computed</code>\nThe archived counterpart of <code>TsGetterSignature::computed</code>\nThe archived counterpart of <code>TsSetterSignature::computed</code>\nThe archived counterpart of <code>TsMethodSignature::computed</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Cond</code>, and <code>None</code> …\nThe archived counterpart of <code>CondExpr::cons</code>\nThe archived counterpart of <code>IfStmt::cons</code>\nThe archived counterpart of <code>SwitchCase::cons</code>\nThe archived counterpart of <code>TsTypeParam::constraint</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Constructor</code>, and <code>None</code> …\nWhether all set bits in a source flags value are also set …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Continue</code>, and <code>None</code> …\nThe archived counterpart of <code>TplElement::cooked</code>\nThis value is never used by <code>swc_ecma_codegen</code>, and this …\nThe archived counterpart of <code>Class::ctxt</code>\nThe archived counterpart of <code>PrivateProp::ctxt</code>\nThe archived counterpart of <code>Constructor::ctxt</code>\nThe archived counterpart of <code>VarDecl::ctxt</code>\nThe archived counterpart of <code>CallExpr::ctxt</code>\nThe archived counterpart of <code>NewExpr::ctxt</code>\nThe archived counterpart of <code>ArrowExpr::ctxt</code>\nThe archived counterpart of <code>TaggedTpl::ctxt</code>\nThe archived counterpart of <code>OptCall::ctxt</code>\nThe archived counterpart of <code>Function::ctxt</code>\nThe archived counterpart of <code>Ident::ctxt</code>\nThe archived counterpart of <code>BlockStmt::ctxt</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Debugger</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Decl</code>, and <code>None</code> …\nThe archived counterpart of <code>ExportDecl::decl</code>\nThe archived counterpart of <code>ExportDefaultDecl::decl</code>\nThe archived counterpart of <code>ClassProp::declare</code>\nThe archived counterpart of <code>FnDecl::declare</code>\nThe archived counterpart of <code>ClassDecl::declare</code>\nThe archived counterpart of <code>VarDecl::declare</code>\nThe archived counterpart of <code>TsInterfaceDecl::declare</code>\nThe archived counterpart of <code>TsTypeAliasDecl::declare</code>\nThe archived counterpart of <code>TsEnumDecl::declare</code>\nThe archived counterpart of <code>TsModuleDecl::declare</code>\nThe archived counterpart of <code>TsNamespaceDecl::declare</code>\nThe archived counterpart of <code>VarDecl::decls</code>\nThe archived counterpart of <code>UsingDecl::decls</code>\nThe archived counterpart of <code>Class::decorators</code>\nThe archived counterpart of <code>ClassProp::decorators</code>\nThe archived counterpart of <code>PrivateProp::decorators</code>\nThe archived counterpart of <code>AutoAccessor::decorators</code>\nThe archived counterpart of <code>Function::decorators</code>\nThe archived counterpart of <code>Param::decorators</code>\nThe archived counterpart of <code>TsParamProp::decorators</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Default</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTypeParam::default</code>\nThe archived counterpart of <code>ClassProp::definite</code>\nThe archived counterpart of <code>PrivateProp::definite</code>\nThe archived counterpart of <code>AutoAccessor::definite</code>\nThe archived counterpart of <code>VarDeclarator::definite</code>\nTypescript only\nThe archived counterpart of <code>YieldExpr::delegate</code>\nThe intersection of a source flags value with the …\nReturns true for <code>eval</code> and member expressions.\nThe archived counterpart of <code>SwitchStmt::discriminant</code>\nDeprecated, use <code>is_multiple_of</code> instead.\nReturns <code>Some</code> if <code>self</code> is of variant <code>DoWhile</code>, and <code>None</code> …\nThe archived counterpart of <code>SpreadElement::dot3_token</code>\nThe archived counterpart of <code>RestPat::dot3_token</code>\nThe archived counterpart of <code>TsArrayType::elem_type</code>\nThe archived counterpart of <code>TsTupleType::elem_types</code>\nThe archived counterpart of <code>ArrayLit::elems</code>\nThe archived counterpart of <code>ArrayPat::elems</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nGet a flags value with all bits unset.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Empty</code>, and <code>None</code> …\nThe archived counterpart of <code>Regex::exp</code>\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Array</code>.\nUnwraps the value, yielding the content of <code>Arrow</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>Assign</code>.\nUnwraps the value, yielding the content of <code>AutoAccessor</code>.\nUnwraps the value, yielding the content of <code>Await</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>BigInt</code>.\nUnwraps the value, yielding the content of <code>Bin</code>.\nUnwraps the value, yielding the content of <code>Block</code>.\nUnwraps the value, yielding the content of <code>BlockStmt</code>.\nUnwraps the value, yielding the content of <code>Bool</code>.\nUnwraps the value, yielding the content of <code>Break</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Call</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>Class</code>.\nUnwraps the value, yielding the content of <code>ClassProp</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Computed</code>.\nUnwraps the value, yielding the content of <code>Cond</code>.\nUnwraps the value, yielding the content of <code>Constructor</code>.\nUnwraps the value, yielding the content of <code>Continue</code>.\nUnwraps the value, yielding the content of <code>Debugger</code>.\nUnwraps the value, yielding the content of <code>Decl</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>Default</code>.\nUnwraps the value, yielding the content of <code>DoWhile</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>Empty</code>.\nUnwraps the value, yielding the content of <code>ExportAll</code>.\nUnwraps the value, yielding the content of <code>ExportDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>ExportNamed</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Expr</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>Fn</code>.\nUnwraps the value, yielding the content of <code>ForIn</code>.\nUnwraps the value, yielding the content of <code>ForOf</code>.\nUnwraps the value, yielding the content of <code>For</code>.\nUnwraps the value, yielding the content of <code>Getter</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>Ident</code>.\nUnwraps the value, yielding the content of <code>If</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Import</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>Invalid</code>.\nUnwraps the value, yielding the content of <code>JSXElement</code>.\nUnwraps the value, yielding the content of <code>JSXEmpty</code>.\nUnwraps the value, yielding the content of <code>JSXFragment</code>.\nUnwraps the value, yielding the content of <code>JSXMember</code>.\nUnwraps the value, yielding the content of <code>JSXMemberExpr</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>KeyValue</code>.\nUnwraps the value, yielding the content of <code>Labeled</code>.\nUnwraps the value, yielding the content of <code>Lit</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>Member</code>.\nUnwraps the value, yielding the content of <code>MetaProp</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Method</code>.\nUnwraps the value, yielding the content of <code>Module</code>.\nUnwraps the value, yielding the content of <code>ModuleDecl</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Named</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>Namespace</code>.\nUnwraps the value, yielding the content of <code>New</code>.\nUnwraps the value, yielding the content of <code>Num</code>.\nUnwraps the value, yielding the content of <code>Number</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>Object</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>OptChain</code>.\nUnwraps the value, yielding the content of <code>Param</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Paren</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Pat</code>.\nUnwraps the value, yielding the content of <code>Private</code>.\nUnwraps the value, yielding the content of <code>PrivateMethod</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateName</code>.\nUnwraps the value, yielding the content of <code>PrivateProp</code>.\nUnwraps the value, yielding the content of <code>Prop</code>.\nUnwraps the value, yielding the content of <code>Public</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Rest</code>.\nUnwraps the value, yielding the content of <code>Return</code>.\nUnwraps the value, yielding the content of <code>Script</code>.\nUnwraps the value, yielding the content of <code>Seq</code>.\nUnwraps the value, yielding the content of <code>Setter</code>.\nUnwraps the value, yielding the content of <code>Shorthand</code>.\nUnwraps the value, yielding the content of <code>Simple</code>.\nUnwraps the value, yielding the content of <code>Spread</code>.\nUnwraps the value, yielding the content of <code>StaticBlock</code>.\nUnwraps the value, yielding the content of <code>Stmt</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Str</code>.\nUnwraps the value, yielding the content of <code>Super</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>SuperProp</code>.\nUnwraps the value, yielding the content of <code>Switch</code>.\nUnwraps the value, yielding the content of <code>TaggedTpl</code>.\nUnwraps the value, yielding the content of <code>This</code>.\nUnwraps the value, yielding the content of <code>Throw</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Tpl</code>.\nUnwraps the value, yielding the content of <code>Try</code>.\nUnwraps the value, yielding the content of <code>TsArrayType</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of <code>TsAs</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsConstAssertion</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEntityName</code>.\nUnwraps the value, yielding the content of <code>TsEnum</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsFnType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsImportEquals</code>.\nUnwraps the value, yielding the content of <code>TsImportType</code>.\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of <code>TsIndexSignature</code>…\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsInferType</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInstantiation</code>.\nUnwraps the value, yielding the content of <code>TsInterface</code>.\nUnwraps the value, yielding the content of <code>TsInterfaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsKeywordType</code>.\nUnwraps the value, yielding the content of <code>TsLitType</code>.\nUnwraps the value, yielding the content of <code>TsMappedType</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsModule</code>.\nUnwraps the value, yielding the content of <code>TsModuleBlock</code>.\nUnwraps the value, yielding the content of <code>TsNamespaceDecl</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsNonNull</code>.\nUnwraps the value, yielding the content of <code>TsOptionalType</code>.\nUnwraps the value, yielding the content of <code>TsParamProp</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsQualifiedName</code>.\nUnwraps the value, yielding the content of <code>TsRestType</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of <code>TsSatisfies</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsThisType</code>.\nUnwraps the value, yielding the content of <code>TsTupleType</code>.\nUnwraps the value, yielding the content of <code>TsTypeAlias</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeAssertion</code>.\nUnwraps the value, yielding the content of <code>TsTypeLit</code>.\nUnwraps the value, yielding the content of <code>TsTypeOperator</code>.\nUnwraps the value, yielding the content of <code>TsTypePredicate</code>.\nUnwraps the value, yielding the content of <code>TsTypeQuery</code>.\nUnwraps the value, yielding the content of <code>TsTypeRef</code>.\nUnwraps the value, yielding the content of …\nUnwraps the value, yielding the content of <code>TsUnionType</code>.\nUnwraps the value, yielding the content of <code>Unary</code>.\nUnwraps the value, yielding the content of <code>Update</code>.\nUnwraps the value, yielding the content of <code>Using</code>.\nUnwraps the value, yielding the content of <code>UsingDecl</code>.\nUnwraps the value, yielding the content of <code>Var</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>VarDecl</code>.\nUnwraps the value, yielding the content of <code>While</code>.\nUnwraps the value, yielding the content of <code>With</code>.\nUnwraps the value, yielding the content of <code>Yield</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportAll</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDecl</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>, and …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ExportNamed</code>, and <code>None</code> …\nThe archived counterpart of …\nThe archived counterpart of <code>ExportNamedSpecifier::exported</code>\n<code>Some(bar)</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Expr</code>, and <code>None</code> …\nThe archived counterpart of <code>Decorator::expr</code>\nThe archived counterpart of <code>SpreadElement::expr</code>\nThe archived counterpart of <code>ParenExpr::expr</code>\nThe archived counterpart of <code>ExprOrSpread::expr</code>\nThe archived counterpart of <code>JSXExprContainer::expr</code>\nThe archived counterpart of <code>JSXSpreadChild::expr</code>\nThe archived counterpart of <code>ExportDefaultExpr::expr</code>\nThe archived counterpart of <code>ComputedPropName::expr</code>\nThe archived counterpart of <code>ExprStmt::expr</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::expr</code>\nThe archived counterpart of <code>TsExternalModuleRef::expr</code>\nThe archived counterpart of <code>TsExportAssignment::expr</code>\nThe archived counterpart of <code>TsAsExpr::expr</code>\nThe archived counterpart of <code>TsTypeAssertion::expr</code>\nThe archived counterpart of <code>TsNonNullExpr::expr</code>\nThe archived counterpart of <code>TsSatisfiesExpr::expr</code>\nThe archived counterpart of <code>TsConstAssertion::expr</code>\nThe archived counterpart of <code>TsInstantiation::expr</code>\nThe archived counterpart of <code>TsTypeQuery::expr_name</code>\nThe archived counterpart of <code>SeqExpr::exprs</code>\nThe archived counterpart of <code>Tpl::exprs</code>\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGreatest common divisor, least common multiple, and …\nThe archived counterpart of <code>TsInterfaceDecl::extends</code>\nThe archived counterpart of <code>TsConditionalType::extends_type</code>\nThe archived counterpart of <code>TsConditionalType::false_type</code>\nThe archived counterpart of <code>TryStmt::finalizer</code>\nThe archived counterpart of <code>Regex::flags</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Fn</code>, and <code>None</code> otherwise.\nCalls Fold<code>::fold_big_int_value</code> with <code>self</code>. (Extra impl)\nCalls Fold<code>::fold_class</code> with <code>self</code>.\nCalls Fold<code>::fold_class_member</code> with <code>self</code>.\nCalls Fold<code>::fold_class_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_private_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_class_method</code> with <code>self</code>.\nCalls Fold<code>::fold_private_method</code> with <code>self</code>.\nCalls Fold<code>::fold_constructor</code> with <code>self</code>.\nCalls Fold<code>::fold_decorator</code> with <code>self</code>.\nCalls Fold<code>::fold_method_kind</code> with <code>self</code>.\nCalls Fold<code>::fold_static_block</code> with <code>self</code>.\nCalls Fold<code>::fold_key</code> with <code>self</code>.\nCalls Fold<code>::fold_auto_accessor</code> with <code>self</code>.\nCalls Fold<code>::fold_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_fn_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_class_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_var_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_var_decl_kind</code> with <code>self</code>.\nCalls Fold<code>::fold_var_declarator</code> with <code>self</code>.\nCalls Fold<code>::fold_using_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_this_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_array_lit</code> with <code>self</code>.\nCalls Fold<code>::fold_object_lit</code> with <code>self</code>.\nCalls Fold<code>::fold_import_with</code> with <code>self</code>.\nCalls Fold<code>::fold_import_with_item</code> with <code>self</code>.\nCalls Fold<code>::fold_prop_or_spread</code> with <code>self</code>.\nCalls Fold<code>::fold_spread_element</code> with <code>self</code>.\nCalls Fold<code>::fold_unary_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_update_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_bin_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_fn_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_class_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_member_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_member_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_super_prop_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_super_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_cond_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_call_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_new_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_seq_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_arrow_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_yield_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_meta_prop_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_meta_prop_kind</code> with <code>self</code>.\nCalls Fold<code>::fold_await_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_tpl</code> with <code>self</code>.\nCalls Fold<code>::fold_tagged_tpl</code> with <code>self</code>.\nCalls Fold<code>::fold_tpl_element</code> with <code>self</code>.\nCalls Fold<code>::fold_paren_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_callee</code> with <code>self</code>.\nCalls Fold<code>::fold_super</code> with <code>self</code>.\nCalls Fold<code>::fold_import</code> with <code>self</code>.\nCalls Fold<code>::fold_expr_or_spread</code> with <code>self</code>.\nCalls Fold<code>::fold_block_stmt_or_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_target</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_target_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_simple_assign_target</code> with <code>self</code>.\nCalls Fold<code>::fold_opt_chain_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_opt_chain_base</code> with <code>self</code>.\nCalls Fold<code>::fold_opt_call</code> with <code>self</code>.\nCalls Fold<code>::fold_function</code> with <code>self</code>.\nCalls Fold<code>::fold_param</code> with <code>self</code>.\nCalls Fold<code>::fold_param_or_ts_param_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_binding_ident</code> with <code>self</code>.\nCalls Fold<code>::fold_ident</code> with <code>self</code>.\nCalls Fold<code>::fold_ident_name</code> with <code>self</code>.\nCalls Fold<code>::fold_private_name</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_object</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_member_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_namespaced_name</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_empty_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_expr_container</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_spread_child</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_element_name</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_opening_element</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_attr_or_spread</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_closing_element</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_attr</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_attr_name</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_attr_value</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_text</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_element</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_element_child</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_fragment</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_opening_fragment</code> with <code>self</code>.\nCalls Fold<code>::fold_jsx_closing_fragment</code> with <code>self</code>.\nCalls Fold<code>::fold_lit</code> with <code>self</code>.\nCalls Fold<code>::fold_big_int</code> with <code>self</code>.\nCalls Fold<code>::fold_str</code> with <code>self</code>.\nCalls Fold<code>::fold_bool</code> with <code>self</code>.\nCalls Fold<code>::fold_null</code> with <code>self</code>.\nCalls Fold<code>::fold_regex</code> with <code>self</code>.\nCalls Fold<code>::fold_number</code> with <code>self</code>.\nCalls Fold<code>::fold_program</code> with <code>self</code>.\nCalls Fold<code>::fold_module</code> with <code>self</code>.\nCalls Fold<code>::fold_script</code> with <code>self</code>.\nCalls Fold<code>::fold_module_item</code> with <code>self</code>.\nCalls Fold<code>::fold_module_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_export_default_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_export_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_import_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_import_phase</code> with <code>self</code>.\nCalls Fold<code>::fold_export_all</code> with <code>self</code>.\nCalls Fold<code>::fold_named_export</code> with <code>self</code>.\nCalls Fold<code>::fold_export_default_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_default_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_import_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_import_default_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_import_star_as_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_import_named_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_export_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_export_namespace_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_export_default_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_export_named_specifier</code> with <code>self</code>.\nCalls Fold<code>::fold_module_export_name</code> with <code>self</code>.\nCalls Fold<code>::fold_binary_op</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_op</code> with <code>self</code>.\nCalls Fold<code>::fold_update_op</code> with <code>self</code>.\nCalls Fold<code>::fold_unary_op</code> with <code>self</code>.\nCalls Fold<code>::fold_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_array_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_object_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_rest_pat</code> with <code>self</code>.\nCalls Fold<code>::fold_object_pat_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_key_value_pat_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_pat_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_key_value_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_assign_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_getter_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_setter_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_method_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_prop_name</code> with <code>self</code>.\nCalls Fold<code>::fold_computed_prop_name</code> with <code>self</code>.\nCalls Fold<code>::fold_block_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_expr_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_empty_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_debugger_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_with_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_return_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_labeled_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_break_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_continue_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_if_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_switch_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_throw_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_try_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_while_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_do_while_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_for_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_for_in_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_for_of_stmt</code> with <code>self</code>.\nCalls Fold<code>::fold_switch_case</code> with <code>self</code>.\nCalls Fold<code>::fold_catch_clause</code> with <code>self</code>.\nCalls Fold<code>::fold_for_head</code> with <code>self</code>.\nCalls Fold<code>::fold_var_decl_or_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_ann</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_param_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_param</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_param_instantiation</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_param_prop</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_param_prop_param</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_qualified_name</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_entity_name</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_element</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_call_signature_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_construct_signature_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_property_signature</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_getter_signature</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_setter_signature</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_method_signature</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_index_signature</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_fn_or_constructor_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_keyword_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_keyword_type_kind</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_this_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_fn_param</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_fn_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_constructor_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_ref</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_predicate</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_this_type_or_ident</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_query</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_query_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_import_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_lit</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_array_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_tuple_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_tuple_element</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_optional_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_rest_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_union_or_intersection_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_union_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_intersection_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_conditional_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_infer_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_parenthesized_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_operator</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_operator_op</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_indexed_access_type</code> with <code>self</code>.\nCalls Fold<code>::fold_true_plus_minus</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_mapped_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_lit_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_lit</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_tpl_lit_type</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_interface_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_interface_body</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_expr_with_type_args</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_alias_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_enum_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_enum_member</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_enum_member_id</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_module_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_namespace_body</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_module_block</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_namespace_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_module_name</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_import_equals_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_module_ref</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_external_module_ref</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_export_assignment</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_namespace_export_decl</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_as_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_type_assertion</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_non_null_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_satisfies_expr</code> with <code>self</code>.\nCalls Fold<code>::fold_accessibility</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_const_assertion</code> with <code>self</code>.\nCalls Fold<code>::fold_ts_instantiation</code> with <code>self</code>.\nCalls Fold<code>::fold_invalid</code> with <code>self</code>.\nCalls Fold<code>::fold_es_version</code> with <code>self</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForIn</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ForOf</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>For</code>, and <code>None</code> otherwise.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates and initializes a <code>BigInt</code>.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates an expression from <code>exprs</code>. This will return first …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nThe archived counterpart of <code>ClassMethod::function</code>\nThe archived counterpart of <code>PrivateMethod::function</code>\nThe archived counterpart of <code>FnDecl::function</code>\nThe archived counterpart of <code>FnExpr::function</code>\nThe archived counterpart of <code>MethodProp::function</code>\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Getter</code>, and <code>None</code> …\nThe archived counterpart of <code>TsModuleDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TsNamespaceDecl::global</code>\nIn TypeScript, this is only available through<code>node.flags</code>.\nThe archived counterpart of <code>TryStmt::handler</code>\nThe archived counterpart of <code>BindingIdent::id</code>\nThe archived counterpart of <code>TsInterfaceDecl::id</code>\nThe archived counterpart of <code>TsTypeAliasDecl::id</code>\nThe archived counterpart of <code>TsEnumDecl::id</code>\nThe archived counterpart of <code>TsEnumMember::id</code>\nThe archived counterpart of <code>TsModuleDecl::id</code>\nThe archived counterpart of <code>TsNamespaceDecl::id</code>\nThe archived counterpart of <code>TsImportEqualsDecl::id</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::id</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Ident</code>, and <code>None</code> …\nThe archived counterpart of <code>FnDecl::ident</code>\nThe archived counterpart of <code>ClassDecl::ident</code>\nThe archived counterpart of <code>FnExpr::ident</code>\nThe archived counterpart of <code>ClassExpr::ident</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>If</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>Class::implements</code>\nTypescript extension.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Import</code>, and <code>None</code> …\nThe archived counterpart of <code>ImportNamedSpecifier::imported</code>\nThe archived counterpart of <code>TsIndexedAccessType::index_type</code>\nThe archived counterpart of <code>VarDeclarator::init</code>\nInitialization expression.\nThe archived counterpart of <code>ForStmt::init</code>\nThe archived counterpart of <code>TsEnumMember::init</code>\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nCreate a private identifier that is unique in the file, …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Invalid</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::is_abstract</code>\nThe archived counterpart of <code>ClassProp::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>ClassMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>PrivateMethod::is_abstract</code>\nTypescript extension.\nThe archived counterpart of <code>AutoAccessor::is_abstract</code>\nThe archived counterpart of <code>TsConstructorType::is_abstract</code>\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Array</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Arrow</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Assign</code>.\nThe archived counterpart of <code>ArrowExpr::is_async</code>\nThe archived counterpart of <code>Function::is_async</code>\nif it’s an async function.\nReturns <code>true</code> if <code>self</code> is of variant <code>AutoAccessor</code>.\nThe archived counterpart of <code>UsingDecl::is_await</code>\nThe archived counterpart of <code>ForOfStmt::is_await</code>\nSpan of the await token.\nReturns <code>true</code> if <code>self</code> is of variant <code>Await</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BigInt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bin</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Block</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>BlockStmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Bool</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Break</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Call</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Class</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ClassProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Computed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Cond</code>.\nThe archived counterpart of <code>TsTypeParam::is_const</code>\nThe archived counterpart of <code>TsEnumDecl::is_const</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Constructor</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Continue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Debugger</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Decl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Default</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>DoWhile</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if <code>self</code> is of variant <code>Empty</code>.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nThe archived counterpart of <code>TsImportEqualsDecl::is_export</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportAll</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportDefaultExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ExportNamed</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Expr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Fn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForIn</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ForOf</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>For</code>.\nThe archived counterpart of <code>ArrowExpr::is_generator</code>\nThe archived counterpart of <code>Function::is_generator</code>\nif it’s a generator.\nReturns <code>true</code> if <code>self</code> is of variant <code>Getter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Ident</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>If</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Import</code>.\nThe archived counterpart of <code>TsTypeParam::is_in</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Invalid</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXElement</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXEmpty</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXFragment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMember</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>KeyValue</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Labeled</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Lit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Member</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>MetaProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Method</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Module</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>ModuleDecl</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Named</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Namespace</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>New</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Num</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Number</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Object</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>OptChain</code>.\nThe archived counterpart of <code>ClassProp::is_optional</code>\nThe archived counterpart of <code>PrivateProp::is_optional</code>\nThe archived counterpart of <code>ClassMethod::is_optional</code>\nThe archived counterpart of <code>PrivateMethod::is_optional</code>\nThe archived counterpart of <code>Constructor::is_optional</code>\nThe archived counterpart of <code>TsTypeParam::is_out</code>\nThe archived counterpart of <code>ClassProp::is_override</code>\nThe archived counterpart of <code>PrivateProp::is_override</code>\nThe archived counterpart of <code>ClassMethod::is_override</code>\nThe archived counterpart of <code>PrivateMethod::is_override</code>\nThe archived counterpart of <code>AutoAccessor::is_override</code>\nThe archived counterpart of <code>TsParamProp::is_override</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>Param</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Paren</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Pat</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Private</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateMethod</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>PrivateProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Prop</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Public</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Rest</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Return</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Script</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Seq</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Setter</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Shorthand</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Simple</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Spread</code>.\nThe archived counterpart of <code>ClassProp::is_static</code>\nThe archived counterpart of <code>PrivateProp::is_static</code>\nThe archived counterpart of <code>ClassMethod::is_static</code>\nThe archived counterpart of <code>PrivateMethod::is_static</code>\nThe archived counterpart of <code>AutoAccessor::is_static</code>\nThe archived counterpart of <code>TsIndexSignature::is_static</code>\nReturns <code>true</code> if <code>self</code> is of variant <code>StaticBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Stmt</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Str</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Super</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>SuperProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Switch</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TaggedTpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>This</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Throw</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Tpl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Try</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsArrayType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsAs</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsCallSignatureDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConditionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructSignatureDecl</code>…\nReturns <code>true</code> if <code>self</code> is of variant <code>TsConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEntityName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsEnum</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExportAssignment</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsExternalModuleRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnOrConstructorType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsFnType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsGetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportEquals</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsImportType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIndexedAccessType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInferType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInstantiation</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterface</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsInterfaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsIntersectionType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsKeywordType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsLitType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMappedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsMethodSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModule</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsModuleBlock</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNamespaceExport</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsNonNull</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsOptionalType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParamProp</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsParenthesizedType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsPropertySignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsQualifiedName</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsRestType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSatisfies</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsSetterSignature</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsThisType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTupleType</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAlias</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeAssertion</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeLit</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeOperator</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypePredicate</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeQuery</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>TsTypeRef</code>.\nReturns <code>true</code> if <code>self</code> is of variant …\nReturns <code>true</code> if <code>self</code> is of variant <code>TsUnionType</code>.\nThe archived counterpart of …\nThe archived counterpart of …\n<code>type</code> in <code>export { type foo as bar }</code>\nThe archived counterpart of …\nReturns <code>true</code> if <code>self</code> is of variant <code>Unary</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Update</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Using</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>UsingDecl</code>.\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns true if <code>c</code> is a valid character for an identifier …\nReturns <code>true</code> if <code>self</code> is of variant <code>Var</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>VarDecl</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>While</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>With</code>.\nReturns <code>true</code> if <code>self</code> is of variant <code>Yield</code>.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXElement</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXEmpty</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXFragment</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMember</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXMemberExpr</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>JSXNamespacedName</code>, and …\nThe archived counterpart of <code>ClassProp::key</code>\nThe archived counterpart of <code>PrivateProp::key</code>\nThe archived counterpart of <code>ClassMethod::key</code>\nThe archived counterpart of <code>PrivateMethod::key</code>\nThe archived counterpart of <code>Constructor::key</code>\nThe archived counterpart of <code>AutoAccessor::key</code>\nThe archived counterpart of <code>KeyValuePatProp::key</code>\nThe archived counterpart of <code>AssignPatProp::key</code>\nNote: This type is to help implementing visitor and the …\nThe archived counterpart of <code>KeyValueProp::key</code>\nThe archived counterpart of <code>AssignProp::key</code>\nThe archived counterpart of <code>GetterProp::key</code>\nThe archived counterpart of <code>SetterProp::key</code>\nThe archived counterpart of <code>MethodProp::key</code>\nThe archived counterpart of <code>TsPropertySignature::key</code>\nThe archived counterpart of <code>TsGetterSignature::key</code>\nThe archived counterpart of <code>TsSetterSignature::key</code>\nThe archived counterpart of <code>TsMethodSignature::key</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>KeyValue</code>, and <code>None</code> …\nThe archived counterpart of <code>ClassMethod::kind</code>\nThe archived counterpart of <code>PrivateMethod::kind</code>\nThe archived counterpart of <code>VarDecl::kind</code>\nThe archived counterpart of <code>MetaPropExpr::kind</code>\nThe archived counterpart of <code>TsKeywordType::kind</code>\nThe archived counterpart of <code>LabeledStmt::label</code>\nThe archived counterpart of <code>BreakStmt::label</code>\nThe archived counterpart of <code>ContinueStmt::label</code>\nThe archived counterpart of <code>TsTupleElement::label</code>\n<code>Ident</code> or <code>RestPat { arg: Ident }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Labeled</code>, and <code>None</code> …\nCalculates the Lowest Common Multiple (LCM) of the number …\nThe archived counterpart of <code>BinExpr::left</code>\nThe archived counterpart of <code>AssignExpr::left</code>\nThe archived counterpart of <code>AssignPat::left</code>\nThe archived counterpart of <code>ForInStmt::left</code>\nThe archived counterpart of <code>ForOfStmt::left</code>\nThe archived counterpart of <code>TsQualifiedName::left</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Lit</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>TsLitType::lit</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::local</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::local</code>\nThe archived counterpart of <code>ImportNamedSpecifier::local</code>\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Member</code>, and <code>None</code> …\nThe archived counterpart of <code>TsTypeLit::members</code>\nThe archived counterpart of <code>TsEnumDecl::members</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>MetaProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Method</code>, and <code>None</code> …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Module</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>ModuleDecl</code>, and <code>None</code> …\nThe archived counterpart of <code>TsImportEqualsDecl::module_ref</code>\nThe archived counterpart of <code>VarDeclarator::name</code>\nThe archived counterpart of <code>PrivateName::name</code>\nThe archived counterpart of <code>JSXNamespacedName::name</code>\nThe archived counterpart of <code>JSXOpeningElement::name</code>\nThe archived counterpart of <code>JSXClosingElement::name</code>\nThe archived counterpart of <code>JSXAttr::name</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::name</code>\nThe archived counterpart of <code>TsTypeParam::name</code>\nThe archived counterpart of <code>TsMappedType::name_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Named</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Namespace</code>, and <code>None</code> …\nCreates and initializes a <code>BigInt</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>New</code>, and <code>None</code> otherwise.\nRounds up to nearest multiple of argument.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe archived counterpart of <code>JSXNamespacedName::ns</code>\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Num</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Number</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::obj</code>\nThe archived counterpart of <code>SuperPropExpr::obj</code>\nThe archived counterpart of <code>JSXMemberExpr::obj</code>\nThe archived counterpart of <code>WithStmt::obj</code>\nThe archived counterpart of <code>TsIndexedAccessType::obj_type</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Object</code>, and <code>None</code> …\nThe archived counterpart of <code>UnaryExpr::op</code>\nThe archived counterpart of <code>UpdateExpr::op</code>\nThe archived counterpart of <code>BinExpr::op</code>\nThe archived counterpart of <code>AssignExpr::op</code>\nThe archived counterpart of <code>TsTypeOperator::op</code>\nCreates a corresponding operator. This macro is used to …\nThe archived counterpart of <code>JSXElement::opening</code>\nThe archived counterpart of <code>JSXFragment::opening</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>OptChain</code>, and <code>None</code> …\nThe archived counterpart of <code>OptChainExpr::optional</code>\nThe archived counterpart of <code>Ident::optional</code>\nTypeScript only. Used in case of an optional parameter.\nThe archived counterpart of <code>ArrayPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>ObjectPat::optional</code>\nOnly in an ambient context\nThe archived counterpart of <code>TsPropertySignature::optional</code>\nThe archived counterpart of <code>TsMethodSignature::optional</code>\nThe archived counterpart of <code>TsMappedType::optional</code>\nThe archived counterpart of <code>ExportNamedSpecifier::orig</code>\n<code>foo</code> in <code>export { foo as bar }</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Param</code>, and <code>None</code> …\nThe archived counterpart of <code>SetterProp::param</code>\nThe archived counterpart of <code>CatchClause::param</code>\nes2019\nThe archived counterpart of <code>TsParamProp::param</code>\nThe archived counterpart of <code>TsSetterSignature::param</code>\nThe archived counterpart of <code>TsTypePredicate::param_name</code>\nThe archived counterpart of <code>Constructor::params</code>\nThe archived counterpart of <code>ArrowExpr::params</code>\nThe archived counterpart of <code>Function::params</code>\nThe archived counterpart of <code>TsTypeParamDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsCallSignatureDecl::params</code>\nThe archived counterpart of …\nThe archived counterpart of <code>TsMethodSignature::params</code>\nThe archived counterpart of <code>TsIndexSignature::params</code>\nThe archived counterpart of <code>TsFnType::params</code>\nThe archived counterpart of <code>TsConstructorType::params</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Paren</code>, and <code>None</code> …\nCreates and initializes a <code>BigInt</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Pat</code>, and <code>None</code> otherwise.\nThe archived counterpart of <code>Param::pat</code>\nThe archived counterpart of <code>Import::phase</code>\nThe archived counterpart of <code>ImportDecl::phase</code>\nReturns <code>self ^ exponent</code>.\nThe archived counterpart of <code>UpdateExpr::prefix</code>\nRounds down to nearest multiple of argument.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Private</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateMethod</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateName</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>PrivateProp</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Prop</code>, and <code>None</code> …\nThe archived counterpart of <code>MemberExpr::prop</code>\nThe archived counterpart of <code>SuperPropExpr::prop</code>\nThe archived counterpart of <code>JSXMemberExpr::prop</code>\nThe archived counterpart of <code>ObjectLit::props</code>\nThe archived counterpart of <code>ObjectPat::props</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Public</code>, and <code>None</code> …\nThe archived counterpart of <code>TsImportType::qualifier</code>\nThe archived counterpart of <code>Tpl::quasis</code>\nThe archived counterpart of <code>TsTplLitType::quasis</code>\nThe archived counterpart of <code>TplElement::raw</code>\nYou may need to perform. …\nThe archived counterpart of <code>JSXText::raw</code>\nThe archived counterpart of <code>BigInt::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Str::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>Number::raw</code>\nUse <code>None</code> value only for transformations to avoid …\nThe archived counterpart of <code>ClassProp::readonly</code>\nThe archived counterpart of <code>PrivateProp::readonly</code>\nThe archived counterpart of <code>TsParamProp::readonly</code>\nThe archived counterpart of <code>TsPropertySignature::readonly</code>\nThe archived counterpart of <code>TsIndexSignature::readonly</code>\nThe archived counterpart of <code>TsIndexedAccessType::readonly</code>\nThe archived counterpart of <code>TsMappedType::readonly</code>\nThe intersection of a source flags value with the …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Rest</code>, and <code>None</code> …\nReturns <code>Some</code> if <code>self</code> is of variant <code>Return</code>, and <code>None</code> …\nThe archived counterpart of <code>ArrowExpr::return_type</code>\nThe archived counterpart of <code>Function::return_type</code>\nThe archived counterpart of <code>BinExpr::right</code>\nThe archived counterpart of <code>AssignExpr::right</code>\nThe archived counterpart of <code>AssignPat::right</code>\nThe archived counterpart of <code>ForInStmt::right</code>\nThe archived counterpart of <code>ForOfStmt::right</code>\nThe archived counterpart of <code>TsQualifiedName::right</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Script</code>, and <code>None</code> …\nThe archived counterpart of <code>JSXOpeningElement::self_closing</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Seq</code>, and <code>None</code> otherwise.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets or clears the bit in the given position, using the two…\nNote\nReturns <code>Some</code> if <code>self</code> is of variant <code>Setter</code>, and <code>None</code> …\nThe archived counterpart of <code>Module::shebang</code>\nThe archived counterpart of <code>Script::shebang</code>\nReturns <code>Some</code> if <code>self</code> is of variant <code>Shorthand</code>, and <code>None</code> …\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nReturns <code>Some</code> if <code>self</code> is of variant <code>Simple</code>, and <code>None</code> …\nThe archived counterpart of <code>Class::span</code>\nThe archived counterpart of <code>ClassProp::span</code>\nThe archived counterpart of <code>PrivateProp::span</code>\nThe archived counterpart of <code>ClassMethod::span</code>\nThe archived counterpart of <code>PrivateMethod::span</code>\nThe archived counterpart of <code>Constructor::span</code>\nThe archived counterpart of <code>Decorator::span</code>\nThe archived counterpart of <code>StaticBlock::span</code>\nThe archived counterpart of <code>AutoAccessor::span</code>\nThe archived counterpart of <code>VarDecl::span</code>\nThe archived counterpart of <code>VarDeclarator::span</code>\nThe archived counterpart of <code>UsingDecl::span</code>\nThe archived counterpart of <code>ThisExpr::span</code>\nThe archived counterpart of <code>ArrayLit::span</code>\nThe archived counterpart of <code>ObjectLit::span</code>\nThe archived counterpart of <code>UnaryExpr::span</code>\nThe archived counterpart of <code>UpdateExpr::span</code>\nThe archived counterpart of <code>BinExpr::span</code>\nThe archived counterpart of <code>AssignExpr::span</code>\nThe archived counterpart of <code>MemberExpr::span</code>\nThe archived counterpart of <code>SuperPropExpr::span</code>\nThe archived counterpart of <code>CondExpr::span</code>\nThe archived counterpart of <code>CallExpr::span</code>\nThe archived counterpart of <code>NewExpr::span</code>\nThe archived counterpart of <code>SeqExpr::span</code>\nThe archived counterpart of <code>ArrowExpr::span</code>\nThe archived counterpart of <code>YieldExpr::span</code>\nThe archived counterpart of <code>MetaPropExpr::span</code>\nThe archived counterpart of <code>AwaitExpr::span</code>\nThe archived counterpart of <code>Tpl::span</code>\nThe archived counterpart of <code>TaggedTpl::span</code>\nThe archived counterpart of <code>TplElement::span</code>\nThe archived counterpart of <code>ParenExpr::span</code>\nThe archived counterpart of <code>Super::span</code>\nThe archived counterpart of <code>Import::span</code>\nThe archived counterpart of <code>OptChainExpr::span</code>\nThe archived counterpart of <code>OptCall::span</code>\nThe archived counterpart of <code>Function::span</code>\nThe archived counterpart of <code>Param::span</code>\nThe archived counterpart of <code>Ident::span</code>\nThe archived counterpart of <code>IdentName::span</code>\nThe archived counterpart of <code>PrivateName::span</code>\nThe archived counterpart of <code>JSXMemberExpr::span</code>\nThe archived counterpart of <code>JSXNamespacedName::span</code>\nThe archived counterpart of <code>JSXEmptyExpr::span</code>\nThe archived counterpart of <code>JSXExprContainer::span</code>\nThe archived counterpart of <code>JSXSpreadChild::span</code>\nThe archived counterpart of <code>JSXOpeningElement::span</code>\nThe archived counterpart of <code>JSXClosingElement::span</code>\nThe archived counterpart of <code>JSXAttr::span</code>\nThe archived counterpart of <code>JSXText::span</code>\nThe archived counterpart of <code>JSXElement::span</code>\nThe archived counterpart of <code>JSXFragment::span</code>\nThe archived counterpart of <code>JSXOpeningFragment::span</code>\nThe archived counterpart of <code>JSXClosingFragment::span</code>\nThe archived counterpart of <code>BigInt::span</code>\nThe archived counterpart of <code>Str::span</code>\nThe archived counterpart of <code>Bool::span</code>\nThe archived counterpart of <code>Null::span</code>\nThe archived counterpart of <code>Regex::span</code>\nThe archived counterpart of <code>Number::span</code>\nThe archived counterpart of <code>Module::span</code>\nThe archived counterpart of <code>Script::span</code>\nThe archived counterpart of <code>ExportDefaultExpr::span</code>\nThe archived counterpart of <code>ExportDecl::span</code>\nThe archived counterpart of <code>ImportDecl::span</code>\nThe archived counterpart of <code>ExportAll::span</code>\nThe archived counterpart of <code>NamedExport::span</code>\nThe archived counterpart of <code>ExportDefaultDecl::span</code>\nThe archived counterpart of <code>ImportDefaultSpecifier::span</code>\nThe archived counterpart of <code>ImportStarAsSpecifier::span</code>\nThe archived counterpart of <code>ImportNamedSpecifier::span</code>\nThe archived counterpart of <code>ExportNamespaceSpecifier::span</code>\nThe archived counterpart of <code>ExportNamedSpecifier::span</code>\nThe archived counterpart of <code>ArrayPat::span</code>\nThe archived counterpart of <code>ObjectPat::span</code>\nThe archived counterpart of <code>AssignPat::span</code>\nThe archived counterpart of <code>RestPat::span</code>\nThe archived counterpart of <code>AssignPatProp::span</code>\nThe archived counterpart of <code>AssignProp::span</code>\nThe archived counterpart of <code>GetterProp::span</code>\nThe archived counterpart of <code>SetterProp::span</code>\nThe archived counterpart of <code>ComputedPropName::span</code>\nSpan including <code>[</code> and <code>]</code>.\nThe archived counterpart of <code>BlockStmt::span</code>\nSpan including the braces.\nThe archived counterpart of <code>ExprStmt::span</code>\nThe archived counterpart of <code>EmptyStmt::span</code>\nSpan of semicolon.\nThe archived counterpart of <code>DebuggerStmt::span</code>\nThe archived counterpart of <code>WithStmt::span</code>\nThe archived counterpart of <code>ReturnStmt::span</code>\nThe archived counterpart of <code>LabeledStmt::span</code>\nThe archived counterpart of <code>BreakStmt::span</code>\nThe archived counterpart of <code>ContinueStmt::span</code>\nThe archived counterpart of <code>IfStmt::span</code>\nThe archived counterpart of <code>SwitchStmt::span</code>\nThe archived counterpart of <code>ThrowStmt::span</code>\nThe archived counterpart of <code>TryStmt::span</code>\nThe archived counterpart of <code>WhileStmt::span</code>\nThe archived counterpart of <code>DoWhileStmt::span</code>\nThe archived counterpart of <code>ForStmt::span</code>\nThe archived counterpart of <code>ForInStmt::span</code>\nThe archived counterpart of <code>ForOfStmt::span</code>\nThe archived counterpart of <code>SwitchCase::span</code>\nThe archived counterpart of <code>CatchClause::span</code>\nThe archived counterpart of <code>TsTypeAnn::span</code>\nThe archived counterpart of <code>TsTypeParamDecl::span</code>\nThe archived counterpart of <code>TsTypeParam::span</code>\nThe archived counterpart of <code>TsTypeParamInstantiation::span</code>\nThe archived counterpart of <code>TsParamProp::span</code>\nThe archived counterpart of <code>TsQualifiedName::span</code>\nThe archived counterpart of <code>TsCallSignatureDecl::span</code>\nThe archived counterpart of <code>TsConstructSignatureDecl::span</code>\nThe archived counterpart of <code>TsPropertySignature::span</code>\nThe archived counterpart of <code>TsGetterSignature::span</code>\nThe archived counterpart of <code>TsSetterSignature::span</code>\nThe archived counterpart of <code>TsMethodSignature::span</code>\nThe archived counterpart of <code>TsIndexSignature::span</code>\nThe archived counterpart of <code>TsKeywordType::span</code>\nThe archived counterpart of <code>TsThisType::span</code>\nThe archived counterpart of <code>TsFnType::span</code>\nThe archived counterpart of <code>TsConstructorType::span</code>\nThe archived counterpart of <code>TsTypeRef::span</code>\nThe archived counterpart of <code>TsTypePredicate::span</code>\nThe archived counterpart of <code>TsTypeQuery::span</code>\nThe archived counterpart of <code>TsImportType::span</code>\nThe archived counterpart of <code>TsTypeLit::span</code>\nThe archived counterpart of <code>TsArrayType::span</code>\nThe archived counterpart of <code>TsTupleType::span</code>\nThe archived counterpart of <code>TsTupleElement::span</code>\nThe archived counterpart of <code>TsOptionalType::span</code>\nThe archived counterpart of <code>TsRestType::span</code>\nThe archived counterpart of <code>TsUnionType::span</code>\nThe archived counterpart of <code>TsIntersectionType::span</code>\nThe archived counterpart of <code>TsConditionalType::span</code>\nThe archived counterpart of <code>TsInferType::span</code>\nThe archived counterpart of <code>TsParenthesizedType::span</code>\nThe archived counterpart of <code>TsTypeOperator::span</code>\nThe archived counterpart of <code>TsIndexedAccessType::span</code>\nThe archived counterpart of <code>TsMappedType::span</code>\nThe archived counterpart of <code>TsLitType::span</code>\nThe archived counterpart of <code>TsTplLitType::span</code>\nThe archived counterpart of <code>TsInterfaceDecl::span</code>\nThe archived counterpart of <code>TsInterfaceBody::span</code>\nThe archived counterpart of <code>TsExprWithTypeArgs::span</code>\nThe archived counterpart of <code>TsTypeAliasDecl::span</code>\nThe archived counterpart of <code>TsEnumDecl::span</code>\nThe archived counterpart of <code>TsEnumMember::span</code>\nThe archived counterpart of <code>TsModuleDecl::span</code>\nThe archived counterpart of <code>TsModuleBlock::span</code>\nThe archived counterpart of <code>TsNamespaceDecl::span</code>\nThe archived counterpart of <code>TsImportEqualsDecl::span</code>\nThe archived counterpart of <code>TsExternalModuleRef::span</code>\nThe archived counterpart of <code>TsExportAssignment::span</code>\nThe archived counterpart of <code>TsNamespaceExportDecl::span</code>")